
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model Part
 * 
 */
export type Part = $Result.DefaultSelection<Prisma.$PartPayload>
/**
 * Model Material
 * 
 */
export type Material = $Result.DefaultSelection<Prisma.$MaterialPayload>
/**
 * Model UserPart
 * 
 */
export type UserPart = $Result.DefaultSelection<Prisma.$UserPartPayload>
/**
 * Model Fortress
 * 
 */
export type Fortress = $Result.DefaultSelection<Prisma.$FortressPayload>
/**
 * Model UserMarking
 * 
 */
export type UserMarking = $Result.DefaultSelection<Prisma.$UserMarkingPayload>

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs>;

  /**
   * `prisma.part`: Exposes CRUD operations for the **Part** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Parts
    * const parts = await prisma.part.findMany()
    * ```
    */
  get part(): Prisma.PartDelegate<ExtArgs>;

  /**
   * `prisma.material`: Exposes CRUD operations for the **Material** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Materials
    * const materials = await prisma.material.findMany()
    * ```
    */
  get material(): Prisma.MaterialDelegate<ExtArgs>;

  /**
   * `prisma.userPart`: Exposes CRUD operations for the **UserPart** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more UserParts
    * const userParts = await prisma.userPart.findMany()
    * ```
    */
  get userPart(): Prisma.UserPartDelegate<ExtArgs>;

  /**
   * `prisma.fortress`: Exposes CRUD operations for the **Fortress** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Fortresses
    * const fortresses = await prisma.fortress.findMany()
    * ```
    */
  get fortress(): Prisma.FortressDelegate<ExtArgs>;

  /**
   * `prisma.userMarking`: Exposes CRUD operations for the **UserMarking** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more UserMarkings
    * const userMarkings = await prisma.userMarking.findMany()
    * ```
    */
  get userMarking(): Prisma.UserMarkingDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.22.0
   * Query Engine version: 605197351a3c8bdd595af2d2a9bc3025bca48ea2
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    User: 'User',
    Part: 'Part',
    Material: 'Material',
    UserPart: 'UserPart',
    Fortress: 'Fortress',
    UserMarking: 'UserMarking'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs, clientOptions: PrismaClientOptions }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], this['params']['clientOptions']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> = {
    meta: {
      modelProps: "user" | "part" | "material" | "userPart" | "fortress" | "userMarking"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      Part: {
        payload: Prisma.$PartPayload<ExtArgs>
        fields: Prisma.PartFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PartFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PartPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PartFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PartPayload>
          }
          findFirst: {
            args: Prisma.PartFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PartPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PartFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PartPayload>
          }
          findMany: {
            args: Prisma.PartFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PartPayload>[]
          }
          create: {
            args: Prisma.PartCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PartPayload>
          }
          createMany: {
            args: Prisma.PartCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.PartDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PartPayload>
          }
          update: {
            args: Prisma.PartUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PartPayload>
          }
          deleteMany: {
            args: Prisma.PartDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PartUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.PartUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PartPayload>
          }
          aggregate: {
            args: Prisma.PartAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePart>
          }
          groupBy: {
            args: Prisma.PartGroupByArgs<ExtArgs>
            result: $Utils.Optional<PartGroupByOutputType>[]
          }
          count: {
            args: Prisma.PartCountArgs<ExtArgs>
            result: $Utils.Optional<PartCountAggregateOutputType> | number
          }
        }
      }
      Material: {
        payload: Prisma.$MaterialPayload<ExtArgs>
        fields: Prisma.MaterialFieldRefs
        operations: {
          findUnique: {
            args: Prisma.MaterialFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MaterialPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.MaterialFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MaterialPayload>
          }
          findFirst: {
            args: Prisma.MaterialFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MaterialPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.MaterialFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MaterialPayload>
          }
          findMany: {
            args: Prisma.MaterialFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MaterialPayload>[]
          }
          create: {
            args: Prisma.MaterialCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MaterialPayload>
          }
          createMany: {
            args: Prisma.MaterialCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.MaterialDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MaterialPayload>
          }
          update: {
            args: Prisma.MaterialUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MaterialPayload>
          }
          deleteMany: {
            args: Prisma.MaterialDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.MaterialUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.MaterialUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MaterialPayload>
          }
          aggregate: {
            args: Prisma.MaterialAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateMaterial>
          }
          groupBy: {
            args: Prisma.MaterialGroupByArgs<ExtArgs>
            result: $Utils.Optional<MaterialGroupByOutputType>[]
          }
          count: {
            args: Prisma.MaterialCountArgs<ExtArgs>
            result: $Utils.Optional<MaterialCountAggregateOutputType> | number
          }
        }
      }
      UserPart: {
        payload: Prisma.$UserPartPayload<ExtArgs>
        fields: Prisma.UserPartFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserPartFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPartPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserPartFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPartPayload>
          }
          findFirst: {
            args: Prisma.UserPartFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPartPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserPartFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPartPayload>
          }
          findMany: {
            args: Prisma.UserPartFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPartPayload>[]
          }
          create: {
            args: Prisma.UserPartCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPartPayload>
          }
          createMany: {
            args: Prisma.UserPartCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.UserPartDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPartPayload>
          }
          update: {
            args: Prisma.UserPartUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPartPayload>
          }
          deleteMany: {
            args: Prisma.UserPartDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserPartUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.UserPartUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPartPayload>
          }
          aggregate: {
            args: Prisma.UserPartAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUserPart>
          }
          groupBy: {
            args: Prisma.UserPartGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserPartGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserPartCountArgs<ExtArgs>
            result: $Utils.Optional<UserPartCountAggregateOutputType> | number
          }
        }
      }
      Fortress: {
        payload: Prisma.$FortressPayload<ExtArgs>
        fields: Prisma.FortressFieldRefs
        operations: {
          findUnique: {
            args: Prisma.FortressFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FortressPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.FortressFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FortressPayload>
          }
          findFirst: {
            args: Prisma.FortressFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FortressPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.FortressFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FortressPayload>
          }
          findMany: {
            args: Prisma.FortressFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FortressPayload>[]
          }
          create: {
            args: Prisma.FortressCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FortressPayload>
          }
          createMany: {
            args: Prisma.FortressCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.FortressDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FortressPayload>
          }
          update: {
            args: Prisma.FortressUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FortressPayload>
          }
          deleteMany: {
            args: Prisma.FortressDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.FortressUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.FortressUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FortressPayload>
          }
          aggregate: {
            args: Prisma.FortressAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateFortress>
          }
          groupBy: {
            args: Prisma.FortressGroupByArgs<ExtArgs>
            result: $Utils.Optional<FortressGroupByOutputType>[]
          }
          count: {
            args: Prisma.FortressCountArgs<ExtArgs>
            result: $Utils.Optional<FortressCountAggregateOutputType> | number
          }
        }
      }
      UserMarking: {
        payload: Prisma.$UserMarkingPayload<ExtArgs>
        fields: Prisma.UserMarkingFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserMarkingFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserMarkingPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserMarkingFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserMarkingPayload>
          }
          findFirst: {
            args: Prisma.UserMarkingFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserMarkingPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserMarkingFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserMarkingPayload>
          }
          findMany: {
            args: Prisma.UserMarkingFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserMarkingPayload>[]
          }
          create: {
            args: Prisma.UserMarkingCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserMarkingPayload>
          }
          createMany: {
            args: Prisma.UserMarkingCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.UserMarkingDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserMarkingPayload>
          }
          update: {
            args: Prisma.UserMarkingUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserMarkingPayload>
          }
          deleteMany: {
            args: Prisma.UserMarkingDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserMarkingUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.UserMarkingUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserMarkingPayload>
          }
          aggregate: {
            args: Prisma.UserMarkingAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUserMarking>
          }
          groupBy: {
            args: Prisma.UserMarkingGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserMarkingGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserMarkingCountArgs<ExtArgs>
            result: $Utils.Optional<UserMarkingCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }


  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    parts: number
    fortresses: number
    markings: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    parts?: boolean | UserCountOutputTypeCountPartsArgs
    fortresses?: boolean | UserCountOutputTypeCountFortressesArgs
    markings?: boolean | UserCountOutputTypeCountMarkingsArgs
  }

  // Custom InputTypes
  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountPartsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserPartWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountFortressesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FortressWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountMarkingsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserMarkingWhereInput
  }


  /**
   * Count Type PartCountOutputType
   */

  export type PartCountOutputType = {
    userParts: number
  }

  export type PartCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    userParts?: boolean | PartCountOutputTypeCountUserPartsArgs
  }

  // Custom InputTypes
  /**
   * PartCountOutputType without action
   */
  export type PartCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PartCountOutputType
     */
    select?: PartCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * PartCountOutputType without action
   */
  export type PartCountOutputTypeCountUserPartsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserPartWhereInput
  }


  /**
   * Count Type MaterialCountOutputType
   */

  export type MaterialCountOutputType = {
    parts: number
  }

  export type MaterialCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    parts?: boolean | MaterialCountOutputTypeCountPartsArgs
  }

  // Custom InputTypes
  /**
   * MaterialCountOutputType without action
   */
  export type MaterialCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MaterialCountOutputType
     */
    select?: MaterialCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * MaterialCountOutputType without action
   */
  export type MaterialCountOutputTypeCountPartsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PartWhereInput
  }


  /**
   * Models
   */

  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserAvgAggregateOutputType = {
    random_parts_num: number | null
  }

  export type UserSumAggregateOutputType = {
    random_parts_num: number | null
  }

  export type UserMinAggregateOutputType = {
    user_id: string | null
    user_name: string | null
    password: string | null
    random_parts_num: number | null
    created_at: Date | null
  }

  export type UserMaxAggregateOutputType = {
    user_id: string | null
    user_name: string | null
    password: string | null
    random_parts_num: number | null
    created_at: Date | null
  }

  export type UserCountAggregateOutputType = {
    user_id: number
    user_name: number
    password: number
    random_parts_num: number
    created_at: number
    _all: number
  }


  export type UserAvgAggregateInputType = {
    random_parts_num?: true
  }

  export type UserSumAggregateInputType = {
    random_parts_num?: true
  }

  export type UserMinAggregateInputType = {
    user_id?: true
    user_name?: true
    password?: true
    random_parts_num?: true
    created_at?: true
  }

  export type UserMaxAggregateInputType = {
    user_id?: true
    user_name?: true
    password?: true
    random_parts_num?: true
    created_at?: true
  }

  export type UserCountAggregateInputType = {
    user_id?: true
    user_name?: true
    password?: true
    random_parts_num?: true
    created_at?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _avg?: UserAvgAggregateInputType
    _sum?: UserSumAggregateInputType
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    user_id: string
    user_name: string
    password: string
    random_parts_num: number
    created_at: Date
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    user_id?: boolean
    user_name?: boolean
    password?: boolean
    random_parts_num?: boolean
    created_at?: boolean
    parts?: boolean | User$partsArgs<ExtArgs>
    fortresses?: boolean | User$fortressesArgs<ExtArgs>
    markings?: boolean | User$markingsArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>


  export type UserSelectScalar = {
    user_id?: boolean
    user_name?: boolean
    password?: boolean
    random_parts_num?: boolean
    created_at?: boolean
  }

  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    parts?: boolean | User$partsArgs<ExtArgs>
    fortresses?: boolean | User$fortressesArgs<ExtArgs>
    markings?: boolean | User$markingsArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      parts: Prisma.$UserPartPayload<ExtArgs>[]
      fortresses: Prisma.$FortressPayload<ExtArgs>[]
      markings: Prisma.$UserMarkingPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      user_id: string
      user_name: string
      password: string
      random_parts_num: number
      created_at: Date
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserFindUniqueArgs>(args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(args: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserFindFirstArgs>(args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `user_id`
     * const userWithUser_idOnly = await prisma.user.findMany({ select: { user_id: true } })
     * 
     */
    findMany<T extends UserFindManyArgs>(args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends UserCreateArgs>(args: SelectSubset<T, UserCreateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserCreateManyArgs>(args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends UserDeleteArgs>(args: SelectSubset<T, UserDeleteArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserUpdateArgs>(args: SelectSubset<T, UserUpdateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserDeleteManyArgs>(args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserUpdateManyArgs>(args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends UserUpsertArgs>(args: SelectSubset<T, UserUpsertArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    parts<T extends User$partsArgs<ExtArgs> = {}>(args?: Subset<T, User$partsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPartPayload<ExtArgs>, T, "findMany"> | Null>
    fortresses<T extends User$fortressesArgs<ExtArgs> = {}>(args?: Subset<T, User$fortressesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FortressPayload<ExtArgs>, T, "findMany"> | Null>
    markings<T extends User$markingsArgs<ExtArgs> = {}>(args?: Subset<T, User$markingsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserMarkingPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the User model
   */ 
  interface UserFieldRefs {
    readonly user_id: FieldRef<"User", 'String'>
    readonly user_name: FieldRef<"User", 'String'>
    readonly password: FieldRef<"User", 'String'>
    readonly random_parts_num: FieldRef<"User", 'Int'>
    readonly created_at: FieldRef<"User", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
  }

  /**
   * User.parts
   */
  export type User$partsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserPart
     */
    select?: UserPartSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserPartInclude<ExtArgs> | null
    where?: UserPartWhereInput
    orderBy?: UserPartOrderByWithRelationInput | UserPartOrderByWithRelationInput[]
    cursor?: UserPartWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserPartScalarFieldEnum | UserPartScalarFieldEnum[]
  }

  /**
   * User.fortresses
   */
  export type User$fortressesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Fortress
     */
    select?: FortressSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FortressInclude<ExtArgs> | null
    where?: FortressWhereInput
    orderBy?: FortressOrderByWithRelationInput | FortressOrderByWithRelationInput[]
    cursor?: FortressWhereUniqueInput
    take?: number
    skip?: number
    distinct?: FortressScalarFieldEnum | FortressScalarFieldEnum[]
  }

  /**
   * User.markings
   */
  export type User$markingsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserMarking
     */
    select?: UserMarkingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserMarkingInclude<ExtArgs> | null
    where?: UserMarkingWhereInput
    orderBy?: UserMarkingOrderByWithRelationInput | UserMarkingOrderByWithRelationInput[]
    cursor?: UserMarkingWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserMarkingScalarFieldEnum | UserMarkingScalarFieldEnum[]
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
  }


  /**
   * Model Part
   */

  export type AggregatePart = {
    _count: PartCountAggregateOutputType | null
    _avg: PartAvgAggregateOutputType | null
    _sum: PartSumAggregateOutputType | null
    _min: PartMinAggregateOutputType | null
    _max: PartMaxAggregateOutputType | null
  }

  export type PartAvgAggregateOutputType = {
    id: number | null
    materialId: number | null
  }

  export type PartSumAggregateOutputType = {
    id: number | null
    materialId: number | null
  }

  export type PartMinAggregateOutputType = {
    id: number | null
    shape: string | null
    materialId: number | null
  }

  export type PartMaxAggregateOutputType = {
    id: number | null
    shape: string | null
    materialId: number | null
  }

  export type PartCountAggregateOutputType = {
    id: number
    shape: number
    materialId: number
    _all: number
  }


  export type PartAvgAggregateInputType = {
    id?: true
    materialId?: true
  }

  export type PartSumAggregateInputType = {
    id?: true
    materialId?: true
  }

  export type PartMinAggregateInputType = {
    id?: true
    shape?: true
    materialId?: true
  }

  export type PartMaxAggregateInputType = {
    id?: true
    shape?: true
    materialId?: true
  }

  export type PartCountAggregateInputType = {
    id?: true
    shape?: true
    materialId?: true
    _all?: true
  }

  export type PartAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Part to aggregate.
     */
    where?: PartWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Parts to fetch.
     */
    orderBy?: PartOrderByWithRelationInput | PartOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PartWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Parts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Parts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Parts
    **/
    _count?: true | PartCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PartAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PartSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PartMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PartMaxAggregateInputType
  }

  export type GetPartAggregateType<T extends PartAggregateArgs> = {
        [P in keyof T & keyof AggregatePart]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePart[P]>
      : GetScalarType<T[P], AggregatePart[P]>
  }




  export type PartGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PartWhereInput
    orderBy?: PartOrderByWithAggregationInput | PartOrderByWithAggregationInput[]
    by: PartScalarFieldEnum[] | PartScalarFieldEnum
    having?: PartScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PartCountAggregateInputType | true
    _avg?: PartAvgAggregateInputType
    _sum?: PartSumAggregateInputType
    _min?: PartMinAggregateInputType
    _max?: PartMaxAggregateInputType
  }

  export type PartGroupByOutputType = {
    id: number
    shape: string
    materialId: number
    _count: PartCountAggregateOutputType | null
    _avg: PartAvgAggregateOutputType | null
    _sum: PartSumAggregateOutputType | null
    _min: PartMinAggregateOutputType | null
    _max: PartMaxAggregateOutputType | null
  }

  type GetPartGroupByPayload<T extends PartGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PartGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PartGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PartGroupByOutputType[P]>
            : GetScalarType<T[P], PartGroupByOutputType[P]>
        }
      >
    >


  export type PartSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    shape?: boolean
    materialId?: boolean
    material?: boolean | MaterialDefaultArgs<ExtArgs>
    userParts?: boolean | Part$userPartsArgs<ExtArgs>
    _count?: boolean | PartCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["part"]>


  export type PartSelectScalar = {
    id?: boolean
    shape?: boolean
    materialId?: boolean
  }

  export type PartInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    material?: boolean | MaterialDefaultArgs<ExtArgs>
    userParts?: boolean | Part$userPartsArgs<ExtArgs>
    _count?: boolean | PartCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $PartPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Part"
    objects: {
      material: Prisma.$MaterialPayload<ExtArgs>
      userParts: Prisma.$UserPartPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      shape: string
      materialId: number
    }, ExtArgs["result"]["part"]>
    composites: {}
  }

  type PartGetPayload<S extends boolean | null | undefined | PartDefaultArgs> = $Result.GetResult<Prisma.$PartPayload, S>

  type PartCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<PartFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: PartCountAggregateInputType | true
    }

  export interface PartDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Part'], meta: { name: 'Part' } }
    /**
     * Find zero or one Part that matches the filter.
     * @param {PartFindUniqueArgs} args - Arguments to find a Part
     * @example
     * // Get one Part
     * const part = await prisma.part.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PartFindUniqueArgs>(args: SelectSubset<T, PartFindUniqueArgs<ExtArgs>>): Prisma__PartClient<$Result.GetResult<Prisma.$PartPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Part that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {PartFindUniqueOrThrowArgs} args - Arguments to find a Part
     * @example
     * // Get one Part
     * const part = await prisma.part.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PartFindUniqueOrThrowArgs>(args: SelectSubset<T, PartFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PartClient<$Result.GetResult<Prisma.$PartPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Part that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PartFindFirstArgs} args - Arguments to find a Part
     * @example
     * // Get one Part
     * const part = await prisma.part.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PartFindFirstArgs>(args?: SelectSubset<T, PartFindFirstArgs<ExtArgs>>): Prisma__PartClient<$Result.GetResult<Prisma.$PartPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Part that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PartFindFirstOrThrowArgs} args - Arguments to find a Part
     * @example
     * // Get one Part
     * const part = await prisma.part.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PartFindFirstOrThrowArgs>(args?: SelectSubset<T, PartFindFirstOrThrowArgs<ExtArgs>>): Prisma__PartClient<$Result.GetResult<Prisma.$PartPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Parts that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PartFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Parts
     * const parts = await prisma.part.findMany()
     * 
     * // Get first 10 Parts
     * const parts = await prisma.part.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const partWithIdOnly = await prisma.part.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PartFindManyArgs>(args?: SelectSubset<T, PartFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PartPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Part.
     * @param {PartCreateArgs} args - Arguments to create a Part.
     * @example
     * // Create one Part
     * const Part = await prisma.part.create({
     *   data: {
     *     // ... data to create a Part
     *   }
     * })
     * 
     */
    create<T extends PartCreateArgs>(args: SelectSubset<T, PartCreateArgs<ExtArgs>>): Prisma__PartClient<$Result.GetResult<Prisma.$PartPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Parts.
     * @param {PartCreateManyArgs} args - Arguments to create many Parts.
     * @example
     * // Create many Parts
     * const part = await prisma.part.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PartCreateManyArgs>(args?: SelectSubset<T, PartCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Part.
     * @param {PartDeleteArgs} args - Arguments to delete one Part.
     * @example
     * // Delete one Part
     * const Part = await prisma.part.delete({
     *   where: {
     *     // ... filter to delete one Part
     *   }
     * })
     * 
     */
    delete<T extends PartDeleteArgs>(args: SelectSubset<T, PartDeleteArgs<ExtArgs>>): Prisma__PartClient<$Result.GetResult<Prisma.$PartPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Part.
     * @param {PartUpdateArgs} args - Arguments to update one Part.
     * @example
     * // Update one Part
     * const part = await prisma.part.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PartUpdateArgs>(args: SelectSubset<T, PartUpdateArgs<ExtArgs>>): Prisma__PartClient<$Result.GetResult<Prisma.$PartPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Parts.
     * @param {PartDeleteManyArgs} args - Arguments to filter Parts to delete.
     * @example
     * // Delete a few Parts
     * const { count } = await prisma.part.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PartDeleteManyArgs>(args?: SelectSubset<T, PartDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Parts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PartUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Parts
     * const part = await prisma.part.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PartUpdateManyArgs>(args: SelectSubset<T, PartUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Part.
     * @param {PartUpsertArgs} args - Arguments to update or create a Part.
     * @example
     * // Update or create a Part
     * const part = await prisma.part.upsert({
     *   create: {
     *     // ... data to create a Part
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Part we want to update
     *   }
     * })
     */
    upsert<T extends PartUpsertArgs>(args: SelectSubset<T, PartUpsertArgs<ExtArgs>>): Prisma__PartClient<$Result.GetResult<Prisma.$PartPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Parts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PartCountArgs} args - Arguments to filter Parts to count.
     * @example
     * // Count the number of Parts
     * const count = await prisma.part.count({
     *   where: {
     *     // ... the filter for the Parts we want to count
     *   }
     * })
    **/
    count<T extends PartCountArgs>(
      args?: Subset<T, PartCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PartCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Part.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PartAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PartAggregateArgs>(args: Subset<T, PartAggregateArgs>): Prisma.PrismaPromise<GetPartAggregateType<T>>

    /**
     * Group by Part.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PartGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PartGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PartGroupByArgs['orderBy'] }
        : { orderBy?: PartGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PartGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPartGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Part model
   */
  readonly fields: PartFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Part.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PartClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    material<T extends MaterialDefaultArgs<ExtArgs> = {}>(args?: Subset<T, MaterialDefaultArgs<ExtArgs>>): Prisma__MaterialClient<$Result.GetResult<Prisma.$MaterialPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    userParts<T extends Part$userPartsArgs<ExtArgs> = {}>(args?: Subset<T, Part$userPartsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPartPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Part model
   */ 
  interface PartFieldRefs {
    readonly id: FieldRef<"Part", 'Int'>
    readonly shape: FieldRef<"Part", 'String'>
    readonly materialId: FieldRef<"Part", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Part findUnique
   */
  export type PartFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Part
     */
    select?: PartSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PartInclude<ExtArgs> | null
    /**
     * Filter, which Part to fetch.
     */
    where: PartWhereUniqueInput
  }

  /**
   * Part findUniqueOrThrow
   */
  export type PartFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Part
     */
    select?: PartSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PartInclude<ExtArgs> | null
    /**
     * Filter, which Part to fetch.
     */
    where: PartWhereUniqueInput
  }

  /**
   * Part findFirst
   */
  export type PartFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Part
     */
    select?: PartSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PartInclude<ExtArgs> | null
    /**
     * Filter, which Part to fetch.
     */
    where?: PartWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Parts to fetch.
     */
    orderBy?: PartOrderByWithRelationInput | PartOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Parts.
     */
    cursor?: PartWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Parts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Parts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Parts.
     */
    distinct?: PartScalarFieldEnum | PartScalarFieldEnum[]
  }

  /**
   * Part findFirstOrThrow
   */
  export type PartFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Part
     */
    select?: PartSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PartInclude<ExtArgs> | null
    /**
     * Filter, which Part to fetch.
     */
    where?: PartWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Parts to fetch.
     */
    orderBy?: PartOrderByWithRelationInput | PartOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Parts.
     */
    cursor?: PartWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Parts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Parts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Parts.
     */
    distinct?: PartScalarFieldEnum | PartScalarFieldEnum[]
  }

  /**
   * Part findMany
   */
  export type PartFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Part
     */
    select?: PartSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PartInclude<ExtArgs> | null
    /**
     * Filter, which Parts to fetch.
     */
    where?: PartWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Parts to fetch.
     */
    orderBy?: PartOrderByWithRelationInput | PartOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Parts.
     */
    cursor?: PartWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Parts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Parts.
     */
    skip?: number
    distinct?: PartScalarFieldEnum | PartScalarFieldEnum[]
  }

  /**
   * Part create
   */
  export type PartCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Part
     */
    select?: PartSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PartInclude<ExtArgs> | null
    /**
     * The data needed to create a Part.
     */
    data: XOR<PartCreateInput, PartUncheckedCreateInput>
  }

  /**
   * Part createMany
   */
  export type PartCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Parts.
     */
    data: PartCreateManyInput | PartCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Part update
   */
  export type PartUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Part
     */
    select?: PartSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PartInclude<ExtArgs> | null
    /**
     * The data needed to update a Part.
     */
    data: XOR<PartUpdateInput, PartUncheckedUpdateInput>
    /**
     * Choose, which Part to update.
     */
    where: PartWhereUniqueInput
  }

  /**
   * Part updateMany
   */
  export type PartUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Parts.
     */
    data: XOR<PartUpdateManyMutationInput, PartUncheckedUpdateManyInput>
    /**
     * Filter which Parts to update
     */
    where?: PartWhereInput
  }

  /**
   * Part upsert
   */
  export type PartUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Part
     */
    select?: PartSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PartInclude<ExtArgs> | null
    /**
     * The filter to search for the Part to update in case it exists.
     */
    where: PartWhereUniqueInput
    /**
     * In case the Part found by the `where` argument doesn't exist, create a new Part with this data.
     */
    create: XOR<PartCreateInput, PartUncheckedCreateInput>
    /**
     * In case the Part was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PartUpdateInput, PartUncheckedUpdateInput>
  }

  /**
   * Part delete
   */
  export type PartDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Part
     */
    select?: PartSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PartInclude<ExtArgs> | null
    /**
     * Filter which Part to delete.
     */
    where: PartWhereUniqueInput
  }

  /**
   * Part deleteMany
   */
  export type PartDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Parts to delete
     */
    where?: PartWhereInput
  }

  /**
   * Part.userParts
   */
  export type Part$userPartsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserPart
     */
    select?: UserPartSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserPartInclude<ExtArgs> | null
    where?: UserPartWhereInput
    orderBy?: UserPartOrderByWithRelationInput | UserPartOrderByWithRelationInput[]
    cursor?: UserPartWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserPartScalarFieldEnum | UserPartScalarFieldEnum[]
  }

  /**
   * Part without action
   */
  export type PartDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Part
     */
    select?: PartSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PartInclude<ExtArgs> | null
  }


  /**
   * Model Material
   */

  export type AggregateMaterial = {
    _count: MaterialCountAggregateOutputType | null
    _avg: MaterialAvgAggregateOutputType | null
    _sum: MaterialSumAggregateOutputType | null
    _min: MaterialMinAggregateOutputType | null
    _max: MaterialMaxAggregateOutputType | null
  }

  export type MaterialAvgAggregateOutputType = {
    id: number | null
  }

  export type MaterialSumAggregateOutputType = {
    id: number | null
  }

  export type MaterialMinAggregateOutputType = {
    id: number | null
    name: string | null
  }

  export type MaterialMaxAggregateOutputType = {
    id: number | null
    name: string | null
  }

  export type MaterialCountAggregateOutputType = {
    id: number
    name: number
    _all: number
  }


  export type MaterialAvgAggregateInputType = {
    id?: true
  }

  export type MaterialSumAggregateInputType = {
    id?: true
  }

  export type MaterialMinAggregateInputType = {
    id?: true
    name?: true
  }

  export type MaterialMaxAggregateInputType = {
    id?: true
    name?: true
  }

  export type MaterialCountAggregateInputType = {
    id?: true
    name?: true
    _all?: true
  }

  export type MaterialAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Material to aggregate.
     */
    where?: MaterialWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Materials to fetch.
     */
    orderBy?: MaterialOrderByWithRelationInput | MaterialOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: MaterialWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Materials from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Materials.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Materials
    **/
    _count?: true | MaterialCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: MaterialAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: MaterialSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MaterialMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MaterialMaxAggregateInputType
  }

  export type GetMaterialAggregateType<T extends MaterialAggregateArgs> = {
        [P in keyof T & keyof AggregateMaterial]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMaterial[P]>
      : GetScalarType<T[P], AggregateMaterial[P]>
  }




  export type MaterialGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MaterialWhereInput
    orderBy?: MaterialOrderByWithAggregationInput | MaterialOrderByWithAggregationInput[]
    by: MaterialScalarFieldEnum[] | MaterialScalarFieldEnum
    having?: MaterialScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MaterialCountAggregateInputType | true
    _avg?: MaterialAvgAggregateInputType
    _sum?: MaterialSumAggregateInputType
    _min?: MaterialMinAggregateInputType
    _max?: MaterialMaxAggregateInputType
  }

  export type MaterialGroupByOutputType = {
    id: number
    name: string
    _count: MaterialCountAggregateOutputType | null
    _avg: MaterialAvgAggregateOutputType | null
    _sum: MaterialSumAggregateOutputType | null
    _min: MaterialMinAggregateOutputType | null
    _max: MaterialMaxAggregateOutputType | null
  }

  type GetMaterialGroupByPayload<T extends MaterialGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<MaterialGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MaterialGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MaterialGroupByOutputType[P]>
            : GetScalarType<T[P], MaterialGroupByOutputType[P]>
        }
      >
    >


  export type MaterialSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    parts?: boolean | Material$partsArgs<ExtArgs>
    _count?: boolean | MaterialCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["material"]>


  export type MaterialSelectScalar = {
    id?: boolean
    name?: boolean
  }

  export type MaterialInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    parts?: boolean | Material$partsArgs<ExtArgs>
    _count?: boolean | MaterialCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $MaterialPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Material"
    objects: {
      parts: Prisma.$PartPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
    }, ExtArgs["result"]["material"]>
    composites: {}
  }

  type MaterialGetPayload<S extends boolean | null | undefined | MaterialDefaultArgs> = $Result.GetResult<Prisma.$MaterialPayload, S>

  type MaterialCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<MaterialFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: MaterialCountAggregateInputType | true
    }

  export interface MaterialDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Material'], meta: { name: 'Material' } }
    /**
     * Find zero or one Material that matches the filter.
     * @param {MaterialFindUniqueArgs} args - Arguments to find a Material
     * @example
     * // Get one Material
     * const material = await prisma.material.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends MaterialFindUniqueArgs>(args: SelectSubset<T, MaterialFindUniqueArgs<ExtArgs>>): Prisma__MaterialClient<$Result.GetResult<Prisma.$MaterialPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Material that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {MaterialFindUniqueOrThrowArgs} args - Arguments to find a Material
     * @example
     * // Get one Material
     * const material = await prisma.material.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends MaterialFindUniqueOrThrowArgs>(args: SelectSubset<T, MaterialFindUniqueOrThrowArgs<ExtArgs>>): Prisma__MaterialClient<$Result.GetResult<Prisma.$MaterialPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Material that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MaterialFindFirstArgs} args - Arguments to find a Material
     * @example
     * // Get one Material
     * const material = await prisma.material.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends MaterialFindFirstArgs>(args?: SelectSubset<T, MaterialFindFirstArgs<ExtArgs>>): Prisma__MaterialClient<$Result.GetResult<Prisma.$MaterialPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Material that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MaterialFindFirstOrThrowArgs} args - Arguments to find a Material
     * @example
     * // Get one Material
     * const material = await prisma.material.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends MaterialFindFirstOrThrowArgs>(args?: SelectSubset<T, MaterialFindFirstOrThrowArgs<ExtArgs>>): Prisma__MaterialClient<$Result.GetResult<Prisma.$MaterialPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Materials that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MaterialFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Materials
     * const materials = await prisma.material.findMany()
     * 
     * // Get first 10 Materials
     * const materials = await prisma.material.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const materialWithIdOnly = await prisma.material.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends MaterialFindManyArgs>(args?: SelectSubset<T, MaterialFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MaterialPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Material.
     * @param {MaterialCreateArgs} args - Arguments to create a Material.
     * @example
     * // Create one Material
     * const Material = await prisma.material.create({
     *   data: {
     *     // ... data to create a Material
     *   }
     * })
     * 
     */
    create<T extends MaterialCreateArgs>(args: SelectSubset<T, MaterialCreateArgs<ExtArgs>>): Prisma__MaterialClient<$Result.GetResult<Prisma.$MaterialPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Materials.
     * @param {MaterialCreateManyArgs} args - Arguments to create many Materials.
     * @example
     * // Create many Materials
     * const material = await prisma.material.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends MaterialCreateManyArgs>(args?: SelectSubset<T, MaterialCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Material.
     * @param {MaterialDeleteArgs} args - Arguments to delete one Material.
     * @example
     * // Delete one Material
     * const Material = await prisma.material.delete({
     *   where: {
     *     // ... filter to delete one Material
     *   }
     * })
     * 
     */
    delete<T extends MaterialDeleteArgs>(args: SelectSubset<T, MaterialDeleteArgs<ExtArgs>>): Prisma__MaterialClient<$Result.GetResult<Prisma.$MaterialPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Material.
     * @param {MaterialUpdateArgs} args - Arguments to update one Material.
     * @example
     * // Update one Material
     * const material = await prisma.material.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends MaterialUpdateArgs>(args: SelectSubset<T, MaterialUpdateArgs<ExtArgs>>): Prisma__MaterialClient<$Result.GetResult<Prisma.$MaterialPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Materials.
     * @param {MaterialDeleteManyArgs} args - Arguments to filter Materials to delete.
     * @example
     * // Delete a few Materials
     * const { count } = await prisma.material.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends MaterialDeleteManyArgs>(args?: SelectSubset<T, MaterialDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Materials.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MaterialUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Materials
     * const material = await prisma.material.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends MaterialUpdateManyArgs>(args: SelectSubset<T, MaterialUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Material.
     * @param {MaterialUpsertArgs} args - Arguments to update or create a Material.
     * @example
     * // Update or create a Material
     * const material = await prisma.material.upsert({
     *   create: {
     *     // ... data to create a Material
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Material we want to update
     *   }
     * })
     */
    upsert<T extends MaterialUpsertArgs>(args: SelectSubset<T, MaterialUpsertArgs<ExtArgs>>): Prisma__MaterialClient<$Result.GetResult<Prisma.$MaterialPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Materials.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MaterialCountArgs} args - Arguments to filter Materials to count.
     * @example
     * // Count the number of Materials
     * const count = await prisma.material.count({
     *   where: {
     *     // ... the filter for the Materials we want to count
     *   }
     * })
    **/
    count<T extends MaterialCountArgs>(
      args?: Subset<T, MaterialCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MaterialCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Material.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MaterialAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MaterialAggregateArgs>(args: Subset<T, MaterialAggregateArgs>): Prisma.PrismaPromise<GetMaterialAggregateType<T>>

    /**
     * Group by Material.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MaterialGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends MaterialGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: MaterialGroupByArgs['orderBy'] }
        : { orderBy?: MaterialGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, MaterialGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMaterialGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Material model
   */
  readonly fields: MaterialFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Material.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__MaterialClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    parts<T extends Material$partsArgs<ExtArgs> = {}>(args?: Subset<T, Material$partsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PartPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Material model
   */ 
  interface MaterialFieldRefs {
    readonly id: FieldRef<"Material", 'Int'>
    readonly name: FieldRef<"Material", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Material findUnique
   */
  export type MaterialFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Material
     */
    select?: MaterialSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MaterialInclude<ExtArgs> | null
    /**
     * Filter, which Material to fetch.
     */
    where: MaterialWhereUniqueInput
  }

  /**
   * Material findUniqueOrThrow
   */
  export type MaterialFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Material
     */
    select?: MaterialSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MaterialInclude<ExtArgs> | null
    /**
     * Filter, which Material to fetch.
     */
    where: MaterialWhereUniqueInput
  }

  /**
   * Material findFirst
   */
  export type MaterialFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Material
     */
    select?: MaterialSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MaterialInclude<ExtArgs> | null
    /**
     * Filter, which Material to fetch.
     */
    where?: MaterialWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Materials to fetch.
     */
    orderBy?: MaterialOrderByWithRelationInput | MaterialOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Materials.
     */
    cursor?: MaterialWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Materials from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Materials.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Materials.
     */
    distinct?: MaterialScalarFieldEnum | MaterialScalarFieldEnum[]
  }

  /**
   * Material findFirstOrThrow
   */
  export type MaterialFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Material
     */
    select?: MaterialSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MaterialInclude<ExtArgs> | null
    /**
     * Filter, which Material to fetch.
     */
    where?: MaterialWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Materials to fetch.
     */
    orderBy?: MaterialOrderByWithRelationInput | MaterialOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Materials.
     */
    cursor?: MaterialWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Materials from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Materials.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Materials.
     */
    distinct?: MaterialScalarFieldEnum | MaterialScalarFieldEnum[]
  }

  /**
   * Material findMany
   */
  export type MaterialFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Material
     */
    select?: MaterialSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MaterialInclude<ExtArgs> | null
    /**
     * Filter, which Materials to fetch.
     */
    where?: MaterialWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Materials to fetch.
     */
    orderBy?: MaterialOrderByWithRelationInput | MaterialOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Materials.
     */
    cursor?: MaterialWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Materials from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Materials.
     */
    skip?: number
    distinct?: MaterialScalarFieldEnum | MaterialScalarFieldEnum[]
  }

  /**
   * Material create
   */
  export type MaterialCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Material
     */
    select?: MaterialSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MaterialInclude<ExtArgs> | null
    /**
     * The data needed to create a Material.
     */
    data: XOR<MaterialCreateInput, MaterialUncheckedCreateInput>
  }

  /**
   * Material createMany
   */
  export type MaterialCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Materials.
     */
    data: MaterialCreateManyInput | MaterialCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Material update
   */
  export type MaterialUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Material
     */
    select?: MaterialSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MaterialInclude<ExtArgs> | null
    /**
     * The data needed to update a Material.
     */
    data: XOR<MaterialUpdateInput, MaterialUncheckedUpdateInput>
    /**
     * Choose, which Material to update.
     */
    where: MaterialWhereUniqueInput
  }

  /**
   * Material updateMany
   */
  export type MaterialUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Materials.
     */
    data: XOR<MaterialUpdateManyMutationInput, MaterialUncheckedUpdateManyInput>
    /**
     * Filter which Materials to update
     */
    where?: MaterialWhereInput
  }

  /**
   * Material upsert
   */
  export type MaterialUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Material
     */
    select?: MaterialSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MaterialInclude<ExtArgs> | null
    /**
     * The filter to search for the Material to update in case it exists.
     */
    where: MaterialWhereUniqueInput
    /**
     * In case the Material found by the `where` argument doesn't exist, create a new Material with this data.
     */
    create: XOR<MaterialCreateInput, MaterialUncheckedCreateInput>
    /**
     * In case the Material was found with the provided `where` argument, update it with this data.
     */
    update: XOR<MaterialUpdateInput, MaterialUncheckedUpdateInput>
  }

  /**
   * Material delete
   */
  export type MaterialDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Material
     */
    select?: MaterialSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MaterialInclude<ExtArgs> | null
    /**
     * Filter which Material to delete.
     */
    where: MaterialWhereUniqueInput
  }

  /**
   * Material deleteMany
   */
  export type MaterialDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Materials to delete
     */
    where?: MaterialWhereInput
  }

  /**
   * Material.parts
   */
  export type Material$partsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Part
     */
    select?: PartSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PartInclude<ExtArgs> | null
    where?: PartWhereInput
    orderBy?: PartOrderByWithRelationInput | PartOrderByWithRelationInput[]
    cursor?: PartWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PartScalarFieldEnum | PartScalarFieldEnum[]
  }

  /**
   * Material without action
   */
  export type MaterialDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Material
     */
    select?: MaterialSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MaterialInclude<ExtArgs> | null
  }


  /**
   * Model UserPart
   */

  export type AggregateUserPart = {
    _count: UserPartCountAggregateOutputType | null
    _avg: UserPartAvgAggregateOutputType | null
    _sum: UserPartSumAggregateOutputType | null
    _min: UserPartMinAggregateOutputType | null
    _max: UserPartMaxAggregateOutputType | null
  }

  export type UserPartAvgAggregateOutputType = {
    id: number | null
    partId: number | null
    domination: number | null
  }

  export type UserPartSumAggregateOutputType = {
    id: number | null
    partId: number | null
    domination: number | null
  }

  export type UserPartMinAggregateOutputType = {
    id: number | null
    userId: string | null
    partId: number | null
    domination: number | null
    createdAt: Date | null
  }

  export type UserPartMaxAggregateOutputType = {
    id: number | null
    userId: string | null
    partId: number | null
    domination: number | null
    createdAt: Date | null
  }

  export type UserPartCountAggregateOutputType = {
    id: number
    userId: number
    partId: number
    domination: number
    createdAt: number
    _all: number
  }


  export type UserPartAvgAggregateInputType = {
    id?: true
    partId?: true
    domination?: true
  }

  export type UserPartSumAggregateInputType = {
    id?: true
    partId?: true
    domination?: true
  }

  export type UserPartMinAggregateInputType = {
    id?: true
    userId?: true
    partId?: true
    domination?: true
    createdAt?: true
  }

  export type UserPartMaxAggregateInputType = {
    id?: true
    userId?: true
    partId?: true
    domination?: true
    createdAt?: true
  }

  export type UserPartCountAggregateInputType = {
    id?: true
    userId?: true
    partId?: true
    domination?: true
    createdAt?: true
    _all?: true
  }

  export type UserPartAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserPart to aggregate.
     */
    where?: UserPartWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserParts to fetch.
     */
    orderBy?: UserPartOrderByWithRelationInput | UserPartOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserPartWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserParts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserParts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned UserParts
    **/
    _count?: true | UserPartCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserPartAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserPartSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserPartMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserPartMaxAggregateInputType
  }

  export type GetUserPartAggregateType<T extends UserPartAggregateArgs> = {
        [P in keyof T & keyof AggregateUserPart]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUserPart[P]>
      : GetScalarType<T[P], AggregateUserPart[P]>
  }




  export type UserPartGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserPartWhereInput
    orderBy?: UserPartOrderByWithAggregationInput | UserPartOrderByWithAggregationInput[]
    by: UserPartScalarFieldEnum[] | UserPartScalarFieldEnum
    having?: UserPartScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserPartCountAggregateInputType | true
    _avg?: UserPartAvgAggregateInputType
    _sum?: UserPartSumAggregateInputType
    _min?: UserPartMinAggregateInputType
    _max?: UserPartMaxAggregateInputType
  }

  export type UserPartGroupByOutputType = {
    id: number
    userId: string
    partId: number
    domination: number
    createdAt: Date
    _count: UserPartCountAggregateOutputType | null
    _avg: UserPartAvgAggregateOutputType | null
    _sum: UserPartSumAggregateOutputType | null
    _min: UserPartMinAggregateOutputType | null
    _max: UserPartMaxAggregateOutputType | null
  }

  type GetUserPartGroupByPayload<T extends UserPartGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserPartGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserPartGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserPartGroupByOutputType[P]>
            : GetScalarType<T[P], UserPartGroupByOutputType[P]>
        }
      >
    >


  export type UserPartSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    partId?: boolean
    domination?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    part?: boolean | PartDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userPart"]>


  export type UserPartSelectScalar = {
    id?: boolean
    userId?: boolean
    partId?: boolean
    domination?: boolean
    createdAt?: boolean
  }

  export type UserPartInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    part?: boolean | PartDefaultArgs<ExtArgs>
  }

  export type $UserPartPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "UserPart"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      part: Prisma.$PartPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      userId: string
      partId: number
      domination: number
      createdAt: Date
    }, ExtArgs["result"]["userPart"]>
    composites: {}
  }

  type UserPartGetPayload<S extends boolean | null | undefined | UserPartDefaultArgs> = $Result.GetResult<Prisma.$UserPartPayload, S>

  type UserPartCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<UserPartFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UserPartCountAggregateInputType | true
    }

  export interface UserPartDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['UserPart'], meta: { name: 'UserPart' } }
    /**
     * Find zero or one UserPart that matches the filter.
     * @param {UserPartFindUniqueArgs} args - Arguments to find a UserPart
     * @example
     * // Get one UserPart
     * const userPart = await prisma.userPart.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserPartFindUniqueArgs>(args: SelectSubset<T, UserPartFindUniqueArgs<ExtArgs>>): Prisma__UserPartClient<$Result.GetResult<Prisma.$UserPartPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one UserPart that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {UserPartFindUniqueOrThrowArgs} args - Arguments to find a UserPart
     * @example
     * // Get one UserPart
     * const userPart = await prisma.userPart.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserPartFindUniqueOrThrowArgs>(args: SelectSubset<T, UserPartFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserPartClient<$Result.GetResult<Prisma.$UserPartPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first UserPart that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserPartFindFirstArgs} args - Arguments to find a UserPart
     * @example
     * // Get one UserPart
     * const userPart = await prisma.userPart.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserPartFindFirstArgs>(args?: SelectSubset<T, UserPartFindFirstArgs<ExtArgs>>): Prisma__UserPartClient<$Result.GetResult<Prisma.$UserPartPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first UserPart that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserPartFindFirstOrThrowArgs} args - Arguments to find a UserPart
     * @example
     * // Get one UserPart
     * const userPart = await prisma.userPart.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserPartFindFirstOrThrowArgs>(args?: SelectSubset<T, UserPartFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserPartClient<$Result.GetResult<Prisma.$UserPartPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more UserParts that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserPartFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all UserParts
     * const userParts = await prisma.userPart.findMany()
     * 
     * // Get first 10 UserParts
     * const userParts = await prisma.userPart.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userPartWithIdOnly = await prisma.userPart.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserPartFindManyArgs>(args?: SelectSubset<T, UserPartFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPartPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a UserPart.
     * @param {UserPartCreateArgs} args - Arguments to create a UserPart.
     * @example
     * // Create one UserPart
     * const UserPart = await prisma.userPart.create({
     *   data: {
     *     // ... data to create a UserPart
     *   }
     * })
     * 
     */
    create<T extends UserPartCreateArgs>(args: SelectSubset<T, UserPartCreateArgs<ExtArgs>>): Prisma__UserPartClient<$Result.GetResult<Prisma.$UserPartPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many UserParts.
     * @param {UserPartCreateManyArgs} args - Arguments to create many UserParts.
     * @example
     * // Create many UserParts
     * const userPart = await prisma.userPart.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserPartCreateManyArgs>(args?: SelectSubset<T, UserPartCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a UserPart.
     * @param {UserPartDeleteArgs} args - Arguments to delete one UserPart.
     * @example
     * // Delete one UserPart
     * const UserPart = await prisma.userPart.delete({
     *   where: {
     *     // ... filter to delete one UserPart
     *   }
     * })
     * 
     */
    delete<T extends UserPartDeleteArgs>(args: SelectSubset<T, UserPartDeleteArgs<ExtArgs>>): Prisma__UserPartClient<$Result.GetResult<Prisma.$UserPartPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one UserPart.
     * @param {UserPartUpdateArgs} args - Arguments to update one UserPart.
     * @example
     * // Update one UserPart
     * const userPart = await prisma.userPart.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserPartUpdateArgs>(args: SelectSubset<T, UserPartUpdateArgs<ExtArgs>>): Prisma__UserPartClient<$Result.GetResult<Prisma.$UserPartPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more UserParts.
     * @param {UserPartDeleteManyArgs} args - Arguments to filter UserParts to delete.
     * @example
     * // Delete a few UserParts
     * const { count } = await prisma.userPart.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserPartDeleteManyArgs>(args?: SelectSubset<T, UserPartDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more UserParts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserPartUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many UserParts
     * const userPart = await prisma.userPart.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserPartUpdateManyArgs>(args: SelectSubset<T, UserPartUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one UserPart.
     * @param {UserPartUpsertArgs} args - Arguments to update or create a UserPart.
     * @example
     * // Update or create a UserPart
     * const userPart = await prisma.userPart.upsert({
     *   create: {
     *     // ... data to create a UserPart
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the UserPart we want to update
     *   }
     * })
     */
    upsert<T extends UserPartUpsertArgs>(args: SelectSubset<T, UserPartUpsertArgs<ExtArgs>>): Prisma__UserPartClient<$Result.GetResult<Prisma.$UserPartPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of UserParts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserPartCountArgs} args - Arguments to filter UserParts to count.
     * @example
     * // Count the number of UserParts
     * const count = await prisma.userPart.count({
     *   where: {
     *     // ... the filter for the UserParts we want to count
     *   }
     * })
    **/
    count<T extends UserPartCountArgs>(
      args?: Subset<T, UserPartCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserPartCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a UserPart.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserPartAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserPartAggregateArgs>(args: Subset<T, UserPartAggregateArgs>): Prisma.PrismaPromise<GetUserPartAggregateType<T>>

    /**
     * Group by UserPart.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserPartGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserPartGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserPartGroupByArgs['orderBy'] }
        : { orderBy?: UserPartGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserPartGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserPartGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the UserPart model
   */
  readonly fields: UserPartFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for UserPart.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserPartClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    part<T extends PartDefaultArgs<ExtArgs> = {}>(args?: Subset<T, PartDefaultArgs<ExtArgs>>): Prisma__PartClient<$Result.GetResult<Prisma.$PartPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the UserPart model
   */ 
  interface UserPartFieldRefs {
    readonly id: FieldRef<"UserPart", 'Int'>
    readonly userId: FieldRef<"UserPart", 'String'>
    readonly partId: FieldRef<"UserPart", 'Int'>
    readonly domination: FieldRef<"UserPart", 'Float'>
    readonly createdAt: FieldRef<"UserPart", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * UserPart findUnique
   */
  export type UserPartFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserPart
     */
    select?: UserPartSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserPartInclude<ExtArgs> | null
    /**
     * Filter, which UserPart to fetch.
     */
    where: UserPartWhereUniqueInput
  }

  /**
   * UserPart findUniqueOrThrow
   */
  export type UserPartFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserPart
     */
    select?: UserPartSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserPartInclude<ExtArgs> | null
    /**
     * Filter, which UserPart to fetch.
     */
    where: UserPartWhereUniqueInput
  }

  /**
   * UserPart findFirst
   */
  export type UserPartFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserPart
     */
    select?: UserPartSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserPartInclude<ExtArgs> | null
    /**
     * Filter, which UserPart to fetch.
     */
    where?: UserPartWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserParts to fetch.
     */
    orderBy?: UserPartOrderByWithRelationInput | UserPartOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserParts.
     */
    cursor?: UserPartWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserParts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserParts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserParts.
     */
    distinct?: UserPartScalarFieldEnum | UserPartScalarFieldEnum[]
  }

  /**
   * UserPart findFirstOrThrow
   */
  export type UserPartFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserPart
     */
    select?: UserPartSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserPartInclude<ExtArgs> | null
    /**
     * Filter, which UserPart to fetch.
     */
    where?: UserPartWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserParts to fetch.
     */
    orderBy?: UserPartOrderByWithRelationInput | UserPartOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserParts.
     */
    cursor?: UserPartWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserParts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserParts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserParts.
     */
    distinct?: UserPartScalarFieldEnum | UserPartScalarFieldEnum[]
  }

  /**
   * UserPart findMany
   */
  export type UserPartFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserPart
     */
    select?: UserPartSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserPartInclude<ExtArgs> | null
    /**
     * Filter, which UserParts to fetch.
     */
    where?: UserPartWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserParts to fetch.
     */
    orderBy?: UserPartOrderByWithRelationInput | UserPartOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing UserParts.
     */
    cursor?: UserPartWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserParts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserParts.
     */
    skip?: number
    distinct?: UserPartScalarFieldEnum | UserPartScalarFieldEnum[]
  }

  /**
   * UserPart create
   */
  export type UserPartCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserPart
     */
    select?: UserPartSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserPartInclude<ExtArgs> | null
    /**
     * The data needed to create a UserPart.
     */
    data: XOR<UserPartCreateInput, UserPartUncheckedCreateInput>
  }

  /**
   * UserPart createMany
   */
  export type UserPartCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many UserParts.
     */
    data: UserPartCreateManyInput | UserPartCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * UserPart update
   */
  export type UserPartUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserPart
     */
    select?: UserPartSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserPartInclude<ExtArgs> | null
    /**
     * The data needed to update a UserPart.
     */
    data: XOR<UserPartUpdateInput, UserPartUncheckedUpdateInput>
    /**
     * Choose, which UserPart to update.
     */
    where: UserPartWhereUniqueInput
  }

  /**
   * UserPart updateMany
   */
  export type UserPartUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update UserParts.
     */
    data: XOR<UserPartUpdateManyMutationInput, UserPartUncheckedUpdateManyInput>
    /**
     * Filter which UserParts to update
     */
    where?: UserPartWhereInput
  }

  /**
   * UserPart upsert
   */
  export type UserPartUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserPart
     */
    select?: UserPartSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserPartInclude<ExtArgs> | null
    /**
     * The filter to search for the UserPart to update in case it exists.
     */
    where: UserPartWhereUniqueInput
    /**
     * In case the UserPart found by the `where` argument doesn't exist, create a new UserPart with this data.
     */
    create: XOR<UserPartCreateInput, UserPartUncheckedCreateInput>
    /**
     * In case the UserPart was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserPartUpdateInput, UserPartUncheckedUpdateInput>
  }

  /**
   * UserPart delete
   */
  export type UserPartDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserPart
     */
    select?: UserPartSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserPartInclude<ExtArgs> | null
    /**
     * Filter which UserPart to delete.
     */
    where: UserPartWhereUniqueInput
  }

  /**
   * UserPart deleteMany
   */
  export type UserPartDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserParts to delete
     */
    where?: UserPartWhereInput
  }

  /**
   * UserPart without action
   */
  export type UserPartDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserPart
     */
    select?: UserPartSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserPartInclude<ExtArgs> | null
  }


  /**
   * Model Fortress
   */

  export type AggregateFortress = {
    _count: FortressCountAggregateOutputType | null
    _avg: FortressAvgAggregateOutputType | null
    _sum: FortressSumAggregateOutputType | null
    _min: FortressMinAggregateOutputType | null
    _max: FortressMaxAggregateOutputType | null
  }

  export type FortressAvgAggregateOutputType = {
    id: number | null
    score: number | null
  }

  export type FortressSumAggregateOutputType = {
    id: number | null
    score: number | null
  }

  export type FortressMinAggregateOutputType = {
    id: number | null
    userId: string | null
    name: string | null
    createdAt: Date | null
    score: number | null
  }

  export type FortressMaxAggregateOutputType = {
    id: number | null
    userId: string | null
    name: string | null
    createdAt: Date | null
    score: number | null
  }

  export type FortressCountAggregateOutputType = {
    id: number
    userId: number
    name: number
    createdAt: number
    parts: number
    score: number
    _all: number
  }


  export type FortressAvgAggregateInputType = {
    id?: true
    score?: true
  }

  export type FortressSumAggregateInputType = {
    id?: true
    score?: true
  }

  export type FortressMinAggregateInputType = {
    id?: true
    userId?: true
    name?: true
    createdAt?: true
    score?: true
  }

  export type FortressMaxAggregateInputType = {
    id?: true
    userId?: true
    name?: true
    createdAt?: true
    score?: true
  }

  export type FortressCountAggregateInputType = {
    id?: true
    userId?: true
    name?: true
    createdAt?: true
    parts?: true
    score?: true
    _all?: true
  }

  export type FortressAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Fortress to aggregate.
     */
    where?: FortressWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Fortresses to fetch.
     */
    orderBy?: FortressOrderByWithRelationInput | FortressOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: FortressWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Fortresses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Fortresses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Fortresses
    **/
    _count?: true | FortressCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: FortressAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: FortressSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: FortressMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: FortressMaxAggregateInputType
  }

  export type GetFortressAggregateType<T extends FortressAggregateArgs> = {
        [P in keyof T & keyof AggregateFortress]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateFortress[P]>
      : GetScalarType<T[P], AggregateFortress[P]>
  }




  export type FortressGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FortressWhereInput
    orderBy?: FortressOrderByWithAggregationInput | FortressOrderByWithAggregationInput[]
    by: FortressScalarFieldEnum[] | FortressScalarFieldEnum
    having?: FortressScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: FortressCountAggregateInputType | true
    _avg?: FortressAvgAggregateInputType
    _sum?: FortressSumAggregateInputType
    _min?: FortressMinAggregateInputType
    _max?: FortressMaxAggregateInputType
  }

  export type FortressGroupByOutputType = {
    id: number
    userId: string
    name: string
    createdAt: Date
    parts: JsonValue
    score: number
    _count: FortressCountAggregateOutputType | null
    _avg: FortressAvgAggregateOutputType | null
    _sum: FortressSumAggregateOutputType | null
    _min: FortressMinAggregateOutputType | null
    _max: FortressMaxAggregateOutputType | null
  }

  type GetFortressGroupByPayload<T extends FortressGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<FortressGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof FortressGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], FortressGroupByOutputType[P]>
            : GetScalarType<T[P], FortressGroupByOutputType[P]>
        }
      >
    >


  export type FortressSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    name?: boolean
    createdAt?: boolean
    parts?: boolean
    score?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["fortress"]>


  export type FortressSelectScalar = {
    id?: boolean
    userId?: boolean
    name?: boolean
    createdAt?: boolean
    parts?: boolean
    score?: boolean
  }

  export type FortressInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $FortressPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Fortress"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      userId: string
      name: string
      createdAt: Date
      parts: Prisma.JsonValue
      score: number
    }, ExtArgs["result"]["fortress"]>
    composites: {}
  }

  type FortressGetPayload<S extends boolean | null | undefined | FortressDefaultArgs> = $Result.GetResult<Prisma.$FortressPayload, S>

  type FortressCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<FortressFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: FortressCountAggregateInputType | true
    }

  export interface FortressDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Fortress'], meta: { name: 'Fortress' } }
    /**
     * Find zero or one Fortress that matches the filter.
     * @param {FortressFindUniqueArgs} args - Arguments to find a Fortress
     * @example
     * // Get one Fortress
     * const fortress = await prisma.fortress.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends FortressFindUniqueArgs>(args: SelectSubset<T, FortressFindUniqueArgs<ExtArgs>>): Prisma__FortressClient<$Result.GetResult<Prisma.$FortressPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Fortress that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {FortressFindUniqueOrThrowArgs} args - Arguments to find a Fortress
     * @example
     * // Get one Fortress
     * const fortress = await prisma.fortress.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends FortressFindUniqueOrThrowArgs>(args: SelectSubset<T, FortressFindUniqueOrThrowArgs<ExtArgs>>): Prisma__FortressClient<$Result.GetResult<Prisma.$FortressPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Fortress that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FortressFindFirstArgs} args - Arguments to find a Fortress
     * @example
     * // Get one Fortress
     * const fortress = await prisma.fortress.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends FortressFindFirstArgs>(args?: SelectSubset<T, FortressFindFirstArgs<ExtArgs>>): Prisma__FortressClient<$Result.GetResult<Prisma.$FortressPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Fortress that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FortressFindFirstOrThrowArgs} args - Arguments to find a Fortress
     * @example
     * // Get one Fortress
     * const fortress = await prisma.fortress.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends FortressFindFirstOrThrowArgs>(args?: SelectSubset<T, FortressFindFirstOrThrowArgs<ExtArgs>>): Prisma__FortressClient<$Result.GetResult<Prisma.$FortressPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Fortresses that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FortressFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Fortresses
     * const fortresses = await prisma.fortress.findMany()
     * 
     * // Get first 10 Fortresses
     * const fortresses = await prisma.fortress.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const fortressWithIdOnly = await prisma.fortress.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends FortressFindManyArgs>(args?: SelectSubset<T, FortressFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FortressPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Fortress.
     * @param {FortressCreateArgs} args - Arguments to create a Fortress.
     * @example
     * // Create one Fortress
     * const Fortress = await prisma.fortress.create({
     *   data: {
     *     // ... data to create a Fortress
     *   }
     * })
     * 
     */
    create<T extends FortressCreateArgs>(args: SelectSubset<T, FortressCreateArgs<ExtArgs>>): Prisma__FortressClient<$Result.GetResult<Prisma.$FortressPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Fortresses.
     * @param {FortressCreateManyArgs} args - Arguments to create many Fortresses.
     * @example
     * // Create many Fortresses
     * const fortress = await prisma.fortress.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends FortressCreateManyArgs>(args?: SelectSubset<T, FortressCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Fortress.
     * @param {FortressDeleteArgs} args - Arguments to delete one Fortress.
     * @example
     * // Delete one Fortress
     * const Fortress = await prisma.fortress.delete({
     *   where: {
     *     // ... filter to delete one Fortress
     *   }
     * })
     * 
     */
    delete<T extends FortressDeleteArgs>(args: SelectSubset<T, FortressDeleteArgs<ExtArgs>>): Prisma__FortressClient<$Result.GetResult<Prisma.$FortressPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Fortress.
     * @param {FortressUpdateArgs} args - Arguments to update one Fortress.
     * @example
     * // Update one Fortress
     * const fortress = await prisma.fortress.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends FortressUpdateArgs>(args: SelectSubset<T, FortressUpdateArgs<ExtArgs>>): Prisma__FortressClient<$Result.GetResult<Prisma.$FortressPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Fortresses.
     * @param {FortressDeleteManyArgs} args - Arguments to filter Fortresses to delete.
     * @example
     * // Delete a few Fortresses
     * const { count } = await prisma.fortress.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends FortressDeleteManyArgs>(args?: SelectSubset<T, FortressDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Fortresses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FortressUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Fortresses
     * const fortress = await prisma.fortress.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends FortressUpdateManyArgs>(args: SelectSubset<T, FortressUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Fortress.
     * @param {FortressUpsertArgs} args - Arguments to update or create a Fortress.
     * @example
     * // Update or create a Fortress
     * const fortress = await prisma.fortress.upsert({
     *   create: {
     *     // ... data to create a Fortress
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Fortress we want to update
     *   }
     * })
     */
    upsert<T extends FortressUpsertArgs>(args: SelectSubset<T, FortressUpsertArgs<ExtArgs>>): Prisma__FortressClient<$Result.GetResult<Prisma.$FortressPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Fortresses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FortressCountArgs} args - Arguments to filter Fortresses to count.
     * @example
     * // Count the number of Fortresses
     * const count = await prisma.fortress.count({
     *   where: {
     *     // ... the filter for the Fortresses we want to count
     *   }
     * })
    **/
    count<T extends FortressCountArgs>(
      args?: Subset<T, FortressCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], FortressCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Fortress.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FortressAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends FortressAggregateArgs>(args: Subset<T, FortressAggregateArgs>): Prisma.PrismaPromise<GetFortressAggregateType<T>>

    /**
     * Group by Fortress.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FortressGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends FortressGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: FortressGroupByArgs['orderBy'] }
        : { orderBy?: FortressGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, FortressGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFortressGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Fortress model
   */
  readonly fields: FortressFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Fortress.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__FortressClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Fortress model
   */ 
  interface FortressFieldRefs {
    readonly id: FieldRef<"Fortress", 'Int'>
    readonly userId: FieldRef<"Fortress", 'String'>
    readonly name: FieldRef<"Fortress", 'String'>
    readonly createdAt: FieldRef<"Fortress", 'DateTime'>
    readonly parts: FieldRef<"Fortress", 'Json'>
    readonly score: FieldRef<"Fortress", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Fortress findUnique
   */
  export type FortressFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Fortress
     */
    select?: FortressSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FortressInclude<ExtArgs> | null
    /**
     * Filter, which Fortress to fetch.
     */
    where: FortressWhereUniqueInput
  }

  /**
   * Fortress findUniqueOrThrow
   */
  export type FortressFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Fortress
     */
    select?: FortressSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FortressInclude<ExtArgs> | null
    /**
     * Filter, which Fortress to fetch.
     */
    where: FortressWhereUniqueInput
  }

  /**
   * Fortress findFirst
   */
  export type FortressFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Fortress
     */
    select?: FortressSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FortressInclude<ExtArgs> | null
    /**
     * Filter, which Fortress to fetch.
     */
    where?: FortressWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Fortresses to fetch.
     */
    orderBy?: FortressOrderByWithRelationInput | FortressOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Fortresses.
     */
    cursor?: FortressWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Fortresses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Fortresses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Fortresses.
     */
    distinct?: FortressScalarFieldEnum | FortressScalarFieldEnum[]
  }

  /**
   * Fortress findFirstOrThrow
   */
  export type FortressFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Fortress
     */
    select?: FortressSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FortressInclude<ExtArgs> | null
    /**
     * Filter, which Fortress to fetch.
     */
    where?: FortressWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Fortresses to fetch.
     */
    orderBy?: FortressOrderByWithRelationInput | FortressOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Fortresses.
     */
    cursor?: FortressWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Fortresses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Fortresses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Fortresses.
     */
    distinct?: FortressScalarFieldEnum | FortressScalarFieldEnum[]
  }

  /**
   * Fortress findMany
   */
  export type FortressFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Fortress
     */
    select?: FortressSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FortressInclude<ExtArgs> | null
    /**
     * Filter, which Fortresses to fetch.
     */
    where?: FortressWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Fortresses to fetch.
     */
    orderBy?: FortressOrderByWithRelationInput | FortressOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Fortresses.
     */
    cursor?: FortressWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Fortresses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Fortresses.
     */
    skip?: number
    distinct?: FortressScalarFieldEnum | FortressScalarFieldEnum[]
  }

  /**
   * Fortress create
   */
  export type FortressCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Fortress
     */
    select?: FortressSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FortressInclude<ExtArgs> | null
    /**
     * The data needed to create a Fortress.
     */
    data: XOR<FortressCreateInput, FortressUncheckedCreateInput>
  }

  /**
   * Fortress createMany
   */
  export type FortressCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Fortresses.
     */
    data: FortressCreateManyInput | FortressCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Fortress update
   */
  export type FortressUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Fortress
     */
    select?: FortressSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FortressInclude<ExtArgs> | null
    /**
     * The data needed to update a Fortress.
     */
    data: XOR<FortressUpdateInput, FortressUncheckedUpdateInput>
    /**
     * Choose, which Fortress to update.
     */
    where: FortressWhereUniqueInput
  }

  /**
   * Fortress updateMany
   */
  export type FortressUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Fortresses.
     */
    data: XOR<FortressUpdateManyMutationInput, FortressUncheckedUpdateManyInput>
    /**
     * Filter which Fortresses to update
     */
    where?: FortressWhereInput
  }

  /**
   * Fortress upsert
   */
  export type FortressUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Fortress
     */
    select?: FortressSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FortressInclude<ExtArgs> | null
    /**
     * The filter to search for the Fortress to update in case it exists.
     */
    where: FortressWhereUniqueInput
    /**
     * In case the Fortress found by the `where` argument doesn't exist, create a new Fortress with this data.
     */
    create: XOR<FortressCreateInput, FortressUncheckedCreateInput>
    /**
     * In case the Fortress was found with the provided `where` argument, update it with this data.
     */
    update: XOR<FortressUpdateInput, FortressUncheckedUpdateInput>
  }

  /**
   * Fortress delete
   */
  export type FortressDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Fortress
     */
    select?: FortressSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FortressInclude<ExtArgs> | null
    /**
     * Filter which Fortress to delete.
     */
    where: FortressWhereUniqueInput
  }

  /**
   * Fortress deleteMany
   */
  export type FortressDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Fortresses to delete
     */
    where?: FortressWhereInput
  }

  /**
   * Fortress without action
   */
  export type FortressDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Fortress
     */
    select?: FortressSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FortressInclude<ExtArgs> | null
  }


  /**
   * Model UserMarking
   */

  export type AggregateUserMarking = {
    _count: UserMarkingCountAggregateOutputType | null
    _avg: UserMarkingAvgAggregateOutputType | null
    _sum: UserMarkingSumAggregateOutputType | null
    _min: UserMarkingMinAggregateOutputType | null
    _max: UserMarkingMaxAggregateOutputType | null
  }

  export type UserMarkingAvgAggregateOutputType = {
    id: number | null
    x: number | null
    y: number | null
  }

  export type UserMarkingSumAggregateOutputType = {
    id: number | null
    x: number | null
    y: number | null
  }

  export type UserMarkingMinAggregateOutputType = {
    id: number | null
    userId: string | null
    x: number | null
    y: number | null
    region: string | null
    markType: string | null
    createdAt: Date | null
  }

  export type UserMarkingMaxAggregateOutputType = {
    id: number | null
    userId: string | null
    x: number | null
    y: number | null
    region: string | null
    markType: string | null
    createdAt: Date | null
  }

  export type UserMarkingCountAggregateOutputType = {
    id: number
    userId: number
    x: number
    y: number
    region: number
    markType: number
    createdAt: number
    _all: number
  }


  export type UserMarkingAvgAggregateInputType = {
    id?: true
    x?: true
    y?: true
  }

  export type UserMarkingSumAggregateInputType = {
    id?: true
    x?: true
    y?: true
  }

  export type UserMarkingMinAggregateInputType = {
    id?: true
    userId?: true
    x?: true
    y?: true
    region?: true
    markType?: true
    createdAt?: true
  }

  export type UserMarkingMaxAggregateInputType = {
    id?: true
    userId?: true
    x?: true
    y?: true
    region?: true
    markType?: true
    createdAt?: true
  }

  export type UserMarkingCountAggregateInputType = {
    id?: true
    userId?: true
    x?: true
    y?: true
    region?: true
    markType?: true
    createdAt?: true
    _all?: true
  }

  export type UserMarkingAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserMarking to aggregate.
     */
    where?: UserMarkingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserMarkings to fetch.
     */
    orderBy?: UserMarkingOrderByWithRelationInput | UserMarkingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserMarkingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserMarkings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserMarkings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned UserMarkings
    **/
    _count?: true | UserMarkingCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserMarkingAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserMarkingSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMarkingMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMarkingMaxAggregateInputType
  }

  export type GetUserMarkingAggregateType<T extends UserMarkingAggregateArgs> = {
        [P in keyof T & keyof AggregateUserMarking]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUserMarking[P]>
      : GetScalarType<T[P], AggregateUserMarking[P]>
  }




  export type UserMarkingGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserMarkingWhereInput
    orderBy?: UserMarkingOrderByWithAggregationInput | UserMarkingOrderByWithAggregationInput[]
    by: UserMarkingScalarFieldEnum[] | UserMarkingScalarFieldEnum
    having?: UserMarkingScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserMarkingCountAggregateInputType | true
    _avg?: UserMarkingAvgAggregateInputType
    _sum?: UserMarkingSumAggregateInputType
    _min?: UserMarkingMinAggregateInputType
    _max?: UserMarkingMaxAggregateInputType
  }

  export type UserMarkingGroupByOutputType = {
    id: number
    userId: string
    x: number
    y: number
    region: string
    markType: string
    createdAt: Date
    _count: UserMarkingCountAggregateOutputType | null
    _avg: UserMarkingAvgAggregateOutputType | null
    _sum: UserMarkingSumAggregateOutputType | null
    _min: UserMarkingMinAggregateOutputType | null
    _max: UserMarkingMaxAggregateOutputType | null
  }

  type GetUserMarkingGroupByPayload<T extends UserMarkingGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserMarkingGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserMarkingGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserMarkingGroupByOutputType[P]>
            : GetScalarType<T[P], UserMarkingGroupByOutputType[P]>
        }
      >
    >


  export type UserMarkingSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    x?: boolean
    y?: boolean
    region?: boolean
    markType?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userMarking"]>


  export type UserMarkingSelectScalar = {
    id?: boolean
    userId?: boolean
    x?: boolean
    y?: boolean
    region?: boolean
    markType?: boolean
    createdAt?: boolean
  }

  export type UserMarkingInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $UserMarkingPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "UserMarking"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      userId: string
      x: number
      y: number
      region: string
      markType: string
      createdAt: Date
    }, ExtArgs["result"]["userMarking"]>
    composites: {}
  }

  type UserMarkingGetPayload<S extends boolean | null | undefined | UserMarkingDefaultArgs> = $Result.GetResult<Prisma.$UserMarkingPayload, S>

  type UserMarkingCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<UserMarkingFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UserMarkingCountAggregateInputType | true
    }

  export interface UserMarkingDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['UserMarking'], meta: { name: 'UserMarking' } }
    /**
     * Find zero or one UserMarking that matches the filter.
     * @param {UserMarkingFindUniqueArgs} args - Arguments to find a UserMarking
     * @example
     * // Get one UserMarking
     * const userMarking = await prisma.userMarking.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserMarkingFindUniqueArgs>(args: SelectSubset<T, UserMarkingFindUniqueArgs<ExtArgs>>): Prisma__UserMarkingClient<$Result.GetResult<Prisma.$UserMarkingPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one UserMarking that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {UserMarkingFindUniqueOrThrowArgs} args - Arguments to find a UserMarking
     * @example
     * // Get one UserMarking
     * const userMarking = await prisma.userMarking.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserMarkingFindUniqueOrThrowArgs>(args: SelectSubset<T, UserMarkingFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserMarkingClient<$Result.GetResult<Prisma.$UserMarkingPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first UserMarking that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserMarkingFindFirstArgs} args - Arguments to find a UserMarking
     * @example
     * // Get one UserMarking
     * const userMarking = await prisma.userMarking.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserMarkingFindFirstArgs>(args?: SelectSubset<T, UserMarkingFindFirstArgs<ExtArgs>>): Prisma__UserMarkingClient<$Result.GetResult<Prisma.$UserMarkingPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first UserMarking that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserMarkingFindFirstOrThrowArgs} args - Arguments to find a UserMarking
     * @example
     * // Get one UserMarking
     * const userMarking = await prisma.userMarking.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserMarkingFindFirstOrThrowArgs>(args?: SelectSubset<T, UserMarkingFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserMarkingClient<$Result.GetResult<Prisma.$UserMarkingPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more UserMarkings that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserMarkingFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all UserMarkings
     * const userMarkings = await prisma.userMarking.findMany()
     * 
     * // Get first 10 UserMarkings
     * const userMarkings = await prisma.userMarking.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userMarkingWithIdOnly = await prisma.userMarking.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserMarkingFindManyArgs>(args?: SelectSubset<T, UserMarkingFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserMarkingPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a UserMarking.
     * @param {UserMarkingCreateArgs} args - Arguments to create a UserMarking.
     * @example
     * // Create one UserMarking
     * const UserMarking = await prisma.userMarking.create({
     *   data: {
     *     // ... data to create a UserMarking
     *   }
     * })
     * 
     */
    create<T extends UserMarkingCreateArgs>(args: SelectSubset<T, UserMarkingCreateArgs<ExtArgs>>): Prisma__UserMarkingClient<$Result.GetResult<Prisma.$UserMarkingPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many UserMarkings.
     * @param {UserMarkingCreateManyArgs} args - Arguments to create many UserMarkings.
     * @example
     * // Create many UserMarkings
     * const userMarking = await prisma.userMarking.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserMarkingCreateManyArgs>(args?: SelectSubset<T, UserMarkingCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a UserMarking.
     * @param {UserMarkingDeleteArgs} args - Arguments to delete one UserMarking.
     * @example
     * // Delete one UserMarking
     * const UserMarking = await prisma.userMarking.delete({
     *   where: {
     *     // ... filter to delete one UserMarking
     *   }
     * })
     * 
     */
    delete<T extends UserMarkingDeleteArgs>(args: SelectSubset<T, UserMarkingDeleteArgs<ExtArgs>>): Prisma__UserMarkingClient<$Result.GetResult<Prisma.$UserMarkingPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one UserMarking.
     * @param {UserMarkingUpdateArgs} args - Arguments to update one UserMarking.
     * @example
     * // Update one UserMarking
     * const userMarking = await prisma.userMarking.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserMarkingUpdateArgs>(args: SelectSubset<T, UserMarkingUpdateArgs<ExtArgs>>): Prisma__UserMarkingClient<$Result.GetResult<Prisma.$UserMarkingPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more UserMarkings.
     * @param {UserMarkingDeleteManyArgs} args - Arguments to filter UserMarkings to delete.
     * @example
     * // Delete a few UserMarkings
     * const { count } = await prisma.userMarking.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserMarkingDeleteManyArgs>(args?: SelectSubset<T, UserMarkingDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more UserMarkings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserMarkingUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many UserMarkings
     * const userMarking = await prisma.userMarking.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserMarkingUpdateManyArgs>(args: SelectSubset<T, UserMarkingUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one UserMarking.
     * @param {UserMarkingUpsertArgs} args - Arguments to update or create a UserMarking.
     * @example
     * // Update or create a UserMarking
     * const userMarking = await prisma.userMarking.upsert({
     *   create: {
     *     // ... data to create a UserMarking
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the UserMarking we want to update
     *   }
     * })
     */
    upsert<T extends UserMarkingUpsertArgs>(args: SelectSubset<T, UserMarkingUpsertArgs<ExtArgs>>): Prisma__UserMarkingClient<$Result.GetResult<Prisma.$UserMarkingPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of UserMarkings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserMarkingCountArgs} args - Arguments to filter UserMarkings to count.
     * @example
     * // Count the number of UserMarkings
     * const count = await prisma.userMarking.count({
     *   where: {
     *     // ... the filter for the UserMarkings we want to count
     *   }
     * })
    **/
    count<T extends UserMarkingCountArgs>(
      args?: Subset<T, UserMarkingCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserMarkingCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a UserMarking.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserMarkingAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserMarkingAggregateArgs>(args: Subset<T, UserMarkingAggregateArgs>): Prisma.PrismaPromise<GetUserMarkingAggregateType<T>>

    /**
     * Group by UserMarking.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserMarkingGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserMarkingGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserMarkingGroupByArgs['orderBy'] }
        : { orderBy?: UserMarkingGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserMarkingGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserMarkingGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the UserMarking model
   */
  readonly fields: UserMarkingFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for UserMarking.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserMarkingClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the UserMarking model
   */ 
  interface UserMarkingFieldRefs {
    readonly id: FieldRef<"UserMarking", 'Int'>
    readonly userId: FieldRef<"UserMarking", 'String'>
    readonly x: FieldRef<"UserMarking", 'Float'>
    readonly y: FieldRef<"UserMarking", 'Float'>
    readonly region: FieldRef<"UserMarking", 'String'>
    readonly markType: FieldRef<"UserMarking", 'String'>
    readonly createdAt: FieldRef<"UserMarking", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * UserMarking findUnique
   */
  export type UserMarkingFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserMarking
     */
    select?: UserMarkingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserMarkingInclude<ExtArgs> | null
    /**
     * Filter, which UserMarking to fetch.
     */
    where: UserMarkingWhereUniqueInput
  }

  /**
   * UserMarking findUniqueOrThrow
   */
  export type UserMarkingFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserMarking
     */
    select?: UserMarkingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserMarkingInclude<ExtArgs> | null
    /**
     * Filter, which UserMarking to fetch.
     */
    where: UserMarkingWhereUniqueInput
  }

  /**
   * UserMarking findFirst
   */
  export type UserMarkingFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserMarking
     */
    select?: UserMarkingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserMarkingInclude<ExtArgs> | null
    /**
     * Filter, which UserMarking to fetch.
     */
    where?: UserMarkingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserMarkings to fetch.
     */
    orderBy?: UserMarkingOrderByWithRelationInput | UserMarkingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserMarkings.
     */
    cursor?: UserMarkingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserMarkings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserMarkings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserMarkings.
     */
    distinct?: UserMarkingScalarFieldEnum | UserMarkingScalarFieldEnum[]
  }

  /**
   * UserMarking findFirstOrThrow
   */
  export type UserMarkingFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserMarking
     */
    select?: UserMarkingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserMarkingInclude<ExtArgs> | null
    /**
     * Filter, which UserMarking to fetch.
     */
    where?: UserMarkingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserMarkings to fetch.
     */
    orderBy?: UserMarkingOrderByWithRelationInput | UserMarkingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserMarkings.
     */
    cursor?: UserMarkingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserMarkings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserMarkings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserMarkings.
     */
    distinct?: UserMarkingScalarFieldEnum | UserMarkingScalarFieldEnum[]
  }

  /**
   * UserMarking findMany
   */
  export type UserMarkingFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserMarking
     */
    select?: UserMarkingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserMarkingInclude<ExtArgs> | null
    /**
     * Filter, which UserMarkings to fetch.
     */
    where?: UserMarkingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserMarkings to fetch.
     */
    orderBy?: UserMarkingOrderByWithRelationInput | UserMarkingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing UserMarkings.
     */
    cursor?: UserMarkingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserMarkings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserMarkings.
     */
    skip?: number
    distinct?: UserMarkingScalarFieldEnum | UserMarkingScalarFieldEnum[]
  }

  /**
   * UserMarking create
   */
  export type UserMarkingCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserMarking
     */
    select?: UserMarkingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserMarkingInclude<ExtArgs> | null
    /**
     * The data needed to create a UserMarking.
     */
    data: XOR<UserMarkingCreateInput, UserMarkingUncheckedCreateInput>
  }

  /**
   * UserMarking createMany
   */
  export type UserMarkingCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many UserMarkings.
     */
    data: UserMarkingCreateManyInput | UserMarkingCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * UserMarking update
   */
  export type UserMarkingUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserMarking
     */
    select?: UserMarkingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserMarkingInclude<ExtArgs> | null
    /**
     * The data needed to update a UserMarking.
     */
    data: XOR<UserMarkingUpdateInput, UserMarkingUncheckedUpdateInput>
    /**
     * Choose, which UserMarking to update.
     */
    where: UserMarkingWhereUniqueInput
  }

  /**
   * UserMarking updateMany
   */
  export type UserMarkingUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update UserMarkings.
     */
    data: XOR<UserMarkingUpdateManyMutationInput, UserMarkingUncheckedUpdateManyInput>
    /**
     * Filter which UserMarkings to update
     */
    where?: UserMarkingWhereInput
  }

  /**
   * UserMarking upsert
   */
  export type UserMarkingUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserMarking
     */
    select?: UserMarkingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserMarkingInclude<ExtArgs> | null
    /**
     * The filter to search for the UserMarking to update in case it exists.
     */
    where: UserMarkingWhereUniqueInput
    /**
     * In case the UserMarking found by the `where` argument doesn't exist, create a new UserMarking with this data.
     */
    create: XOR<UserMarkingCreateInput, UserMarkingUncheckedCreateInput>
    /**
     * In case the UserMarking was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserMarkingUpdateInput, UserMarkingUncheckedUpdateInput>
  }

  /**
   * UserMarking delete
   */
  export type UserMarkingDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserMarking
     */
    select?: UserMarkingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserMarkingInclude<ExtArgs> | null
    /**
     * Filter which UserMarking to delete.
     */
    where: UserMarkingWhereUniqueInput
  }

  /**
   * UserMarking deleteMany
   */
  export type UserMarkingDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserMarkings to delete
     */
    where?: UserMarkingWhereInput
  }

  /**
   * UserMarking without action
   */
  export type UserMarkingDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserMarking
     */
    select?: UserMarkingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserMarkingInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    user_id: 'user_id',
    user_name: 'user_name',
    password: 'password',
    random_parts_num: 'random_parts_num',
    created_at: 'created_at'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const PartScalarFieldEnum: {
    id: 'id',
    shape: 'shape',
    materialId: 'materialId'
  };

  export type PartScalarFieldEnum = (typeof PartScalarFieldEnum)[keyof typeof PartScalarFieldEnum]


  export const MaterialScalarFieldEnum: {
    id: 'id',
    name: 'name'
  };

  export type MaterialScalarFieldEnum = (typeof MaterialScalarFieldEnum)[keyof typeof MaterialScalarFieldEnum]


  export const UserPartScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    partId: 'partId',
    domination: 'domination',
    createdAt: 'createdAt'
  };

  export type UserPartScalarFieldEnum = (typeof UserPartScalarFieldEnum)[keyof typeof UserPartScalarFieldEnum]


  export const FortressScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    name: 'name',
    createdAt: 'createdAt',
    parts: 'parts',
    score: 'score'
  };

  export type FortressScalarFieldEnum = (typeof FortressScalarFieldEnum)[keyof typeof FortressScalarFieldEnum]


  export const UserMarkingScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    x: 'x',
    y: 'y',
    region: 'region',
    markType: 'markType',
    createdAt: 'createdAt'
  };

  export type UserMarkingScalarFieldEnum = (typeof UserMarkingScalarFieldEnum)[keyof typeof UserMarkingScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const JsonNullValueInput: {
    JsonNull: typeof JsonNull
  };

  export type JsonNullValueInput = (typeof JsonNullValueInput)[keyof typeof JsonNullValueInput]


  export const JsonNullValueFilter: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull,
    AnyNull: typeof AnyNull
  };

  export type JsonNullValueFilter = (typeof JsonNullValueFilter)[keyof typeof JsonNullValueFilter]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Json'
   */
  export type JsonFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Json'>
    
  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    user_id?: StringFilter<"User"> | string
    user_name?: StringFilter<"User"> | string
    password?: StringFilter<"User"> | string
    random_parts_num?: IntFilter<"User"> | number
    created_at?: DateTimeFilter<"User"> | Date | string
    parts?: UserPartListRelationFilter
    fortresses?: FortressListRelationFilter
    markings?: UserMarkingListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    user_id?: SortOrder
    user_name?: SortOrder
    password?: SortOrder
    random_parts_num?: SortOrder
    created_at?: SortOrder
    parts?: UserPartOrderByRelationAggregateInput
    fortresses?: FortressOrderByRelationAggregateInput
    markings?: UserMarkingOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    user_id?: string
    user_name_password?: UserUser_namePasswordCompoundUniqueInput
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    user_name?: StringFilter<"User"> | string
    password?: StringFilter<"User"> | string
    random_parts_num?: IntFilter<"User"> | number
    created_at?: DateTimeFilter<"User"> | Date | string
    parts?: UserPartListRelationFilter
    fortresses?: FortressListRelationFilter
    markings?: UserMarkingListRelationFilter
  }, "user_id" | "user_name_password">

  export type UserOrderByWithAggregationInput = {
    user_id?: SortOrder
    user_name?: SortOrder
    password?: SortOrder
    random_parts_num?: SortOrder
    created_at?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _avg?: UserAvgOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
    _sum?: UserSumOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    user_id?: StringWithAggregatesFilter<"User"> | string
    user_name?: StringWithAggregatesFilter<"User"> | string
    password?: StringWithAggregatesFilter<"User"> | string
    random_parts_num?: IntWithAggregatesFilter<"User"> | number
    created_at?: DateTimeWithAggregatesFilter<"User"> | Date | string
  }

  export type PartWhereInput = {
    AND?: PartWhereInput | PartWhereInput[]
    OR?: PartWhereInput[]
    NOT?: PartWhereInput | PartWhereInput[]
    id?: IntFilter<"Part"> | number
    shape?: StringFilter<"Part"> | string
    materialId?: IntFilter<"Part"> | number
    material?: XOR<MaterialRelationFilter, MaterialWhereInput>
    userParts?: UserPartListRelationFilter
  }

  export type PartOrderByWithRelationInput = {
    id?: SortOrder
    shape?: SortOrder
    materialId?: SortOrder
    material?: MaterialOrderByWithRelationInput
    userParts?: UserPartOrderByRelationAggregateInput
  }

  export type PartWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: PartWhereInput | PartWhereInput[]
    OR?: PartWhereInput[]
    NOT?: PartWhereInput | PartWhereInput[]
    shape?: StringFilter<"Part"> | string
    materialId?: IntFilter<"Part"> | number
    material?: XOR<MaterialRelationFilter, MaterialWhereInput>
    userParts?: UserPartListRelationFilter
  }, "id">

  export type PartOrderByWithAggregationInput = {
    id?: SortOrder
    shape?: SortOrder
    materialId?: SortOrder
    _count?: PartCountOrderByAggregateInput
    _avg?: PartAvgOrderByAggregateInput
    _max?: PartMaxOrderByAggregateInput
    _min?: PartMinOrderByAggregateInput
    _sum?: PartSumOrderByAggregateInput
  }

  export type PartScalarWhereWithAggregatesInput = {
    AND?: PartScalarWhereWithAggregatesInput | PartScalarWhereWithAggregatesInput[]
    OR?: PartScalarWhereWithAggregatesInput[]
    NOT?: PartScalarWhereWithAggregatesInput | PartScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Part"> | number
    shape?: StringWithAggregatesFilter<"Part"> | string
    materialId?: IntWithAggregatesFilter<"Part"> | number
  }

  export type MaterialWhereInput = {
    AND?: MaterialWhereInput | MaterialWhereInput[]
    OR?: MaterialWhereInput[]
    NOT?: MaterialWhereInput | MaterialWhereInput[]
    id?: IntFilter<"Material"> | number
    name?: StringFilter<"Material"> | string
    parts?: PartListRelationFilter
  }

  export type MaterialOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    parts?: PartOrderByRelationAggregateInput
  }

  export type MaterialWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: MaterialWhereInput | MaterialWhereInput[]
    OR?: MaterialWhereInput[]
    NOT?: MaterialWhereInput | MaterialWhereInput[]
    name?: StringFilter<"Material"> | string
    parts?: PartListRelationFilter
  }, "id">

  export type MaterialOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    _count?: MaterialCountOrderByAggregateInput
    _avg?: MaterialAvgOrderByAggregateInput
    _max?: MaterialMaxOrderByAggregateInput
    _min?: MaterialMinOrderByAggregateInput
    _sum?: MaterialSumOrderByAggregateInput
  }

  export type MaterialScalarWhereWithAggregatesInput = {
    AND?: MaterialScalarWhereWithAggregatesInput | MaterialScalarWhereWithAggregatesInput[]
    OR?: MaterialScalarWhereWithAggregatesInput[]
    NOT?: MaterialScalarWhereWithAggregatesInput | MaterialScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Material"> | number
    name?: StringWithAggregatesFilter<"Material"> | string
  }

  export type UserPartWhereInput = {
    AND?: UserPartWhereInput | UserPartWhereInput[]
    OR?: UserPartWhereInput[]
    NOT?: UserPartWhereInput | UserPartWhereInput[]
    id?: IntFilter<"UserPart"> | number
    userId?: StringFilter<"UserPart"> | string
    partId?: IntFilter<"UserPart"> | number
    domination?: FloatFilter<"UserPart"> | number
    createdAt?: DateTimeFilter<"UserPart"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
    part?: XOR<PartRelationFilter, PartWhereInput>
  }

  export type UserPartOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    partId?: SortOrder
    domination?: SortOrder
    createdAt?: SortOrder
    user?: UserOrderByWithRelationInput
    part?: PartOrderByWithRelationInput
  }

  export type UserPartWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: UserPartWhereInput | UserPartWhereInput[]
    OR?: UserPartWhereInput[]
    NOT?: UserPartWhereInput | UserPartWhereInput[]
    userId?: StringFilter<"UserPart"> | string
    partId?: IntFilter<"UserPart"> | number
    domination?: FloatFilter<"UserPart"> | number
    createdAt?: DateTimeFilter<"UserPart"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
    part?: XOR<PartRelationFilter, PartWhereInput>
  }, "id">

  export type UserPartOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    partId?: SortOrder
    domination?: SortOrder
    createdAt?: SortOrder
    _count?: UserPartCountOrderByAggregateInput
    _avg?: UserPartAvgOrderByAggregateInput
    _max?: UserPartMaxOrderByAggregateInput
    _min?: UserPartMinOrderByAggregateInput
    _sum?: UserPartSumOrderByAggregateInput
  }

  export type UserPartScalarWhereWithAggregatesInput = {
    AND?: UserPartScalarWhereWithAggregatesInput | UserPartScalarWhereWithAggregatesInput[]
    OR?: UserPartScalarWhereWithAggregatesInput[]
    NOT?: UserPartScalarWhereWithAggregatesInput | UserPartScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"UserPart"> | number
    userId?: StringWithAggregatesFilter<"UserPart"> | string
    partId?: IntWithAggregatesFilter<"UserPart"> | number
    domination?: FloatWithAggregatesFilter<"UserPart"> | number
    createdAt?: DateTimeWithAggregatesFilter<"UserPart"> | Date | string
  }

  export type FortressWhereInput = {
    AND?: FortressWhereInput | FortressWhereInput[]
    OR?: FortressWhereInput[]
    NOT?: FortressWhereInput | FortressWhereInput[]
    id?: IntFilter<"Fortress"> | number
    userId?: StringFilter<"Fortress"> | string
    name?: StringFilter<"Fortress"> | string
    createdAt?: DateTimeFilter<"Fortress"> | Date | string
    parts?: JsonFilter<"Fortress">
    score?: IntFilter<"Fortress"> | number
    user?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type FortressOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    parts?: SortOrder
    score?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type FortressWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: FortressWhereInput | FortressWhereInput[]
    OR?: FortressWhereInput[]
    NOT?: FortressWhereInput | FortressWhereInput[]
    userId?: StringFilter<"Fortress"> | string
    name?: StringFilter<"Fortress"> | string
    createdAt?: DateTimeFilter<"Fortress"> | Date | string
    parts?: JsonFilter<"Fortress">
    score?: IntFilter<"Fortress"> | number
    user?: XOR<UserRelationFilter, UserWhereInput>
  }, "id">

  export type FortressOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    parts?: SortOrder
    score?: SortOrder
    _count?: FortressCountOrderByAggregateInput
    _avg?: FortressAvgOrderByAggregateInput
    _max?: FortressMaxOrderByAggregateInput
    _min?: FortressMinOrderByAggregateInput
    _sum?: FortressSumOrderByAggregateInput
  }

  export type FortressScalarWhereWithAggregatesInput = {
    AND?: FortressScalarWhereWithAggregatesInput | FortressScalarWhereWithAggregatesInput[]
    OR?: FortressScalarWhereWithAggregatesInput[]
    NOT?: FortressScalarWhereWithAggregatesInput | FortressScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Fortress"> | number
    userId?: StringWithAggregatesFilter<"Fortress"> | string
    name?: StringWithAggregatesFilter<"Fortress"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Fortress"> | Date | string
    parts?: JsonWithAggregatesFilter<"Fortress">
    score?: IntWithAggregatesFilter<"Fortress"> | number
  }

  export type UserMarkingWhereInput = {
    AND?: UserMarkingWhereInput | UserMarkingWhereInput[]
    OR?: UserMarkingWhereInput[]
    NOT?: UserMarkingWhereInput | UserMarkingWhereInput[]
    id?: IntFilter<"UserMarking"> | number
    userId?: StringFilter<"UserMarking"> | string
    x?: FloatFilter<"UserMarking"> | number
    y?: FloatFilter<"UserMarking"> | number
    region?: StringFilter<"UserMarking"> | string
    markType?: StringFilter<"UserMarking"> | string
    createdAt?: DateTimeFilter<"UserMarking"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type UserMarkingOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    x?: SortOrder
    y?: SortOrder
    region?: SortOrder
    markType?: SortOrder
    createdAt?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type UserMarkingWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: UserMarkingWhereInput | UserMarkingWhereInput[]
    OR?: UserMarkingWhereInput[]
    NOT?: UserMarkingWhereInput | UserMarkingWhereInput[]
    userId?: StringFilter<"UserMarking"> | string
    x?: FloatFilter<"UserMarking"> | number
    y?: FloatFilter<"UserMarking"> | number
    region?: StringFilter<"UserMarking"> | string
    markType?: StringFilter<"UserMarking"> | string
    createdAt?: DateTimeFilter<"UserMarking"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
  }, "id">

  export type UserMarkingOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    x?: SortOrder
    y?: SortOrder
    region?: SortOrder
    markType?: SortOrder
    createdAt?: SortOrder
    _count?: UserMarkingCountOrderByAggregateInput
    _avg?: UserMarkingAvgOrderByAggregateInput
    _max?: UserMarkingMaxOrderByAggregateInput
    _min?: UserMarkingMinOrderByAggregateInput
    _sum?: UserMarkingSumOrderByAggregateInput
  }

  export type UserMarkingScalarWhereWithAggregatesInput = {
    AND?: UserMarkingScalarWhereWithAggregatesInput | UserMarkingScalarWhereWithAggregatesInput[]
    OR?: UserMarkingScalarWhereWithAggregatesInput[]
    NOT?: UserMarkingScalarWhereWithAggregatesInput | UserMarkingScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"UserMarking"> | number
    userId?: StringWithAggregatesFilter<"UserMarking"> | string
    x?: FloatWithAggregatesFilter<"UserMarking"> | number
    y?: FloatWithAggregatesFilter<"UserMarking"> | number
    region?: StringWithAggregatesFilter<"UserMarking"> | string
    markType?: StringWithAggregatesFilter<"UserMarking"> | string
    createdAt?: DateTimeWithAggregatesFilter<"UserMarking"> | Date | string
  }

  export type UserCreateInput = {
    user_id?: string
    user_name: string
    password: string
    random_parts_num?: number
    created_at?: Date | string
    parts?: UserPartCreateNestedManyWithoutUserInput
    fortresses?: FortressCreateNestedManyWithoutUserInput
    markings?: UserMarkingCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateInput = {
    user_id?: string
    user_name: string
    password: string
    random_parts_num?: number
    created_at?: Date | string
    parts?: UserPartUncheckedCreateNestedManyWithoutUserInput
    fortresses?: FortressUncheckedCreateNestedManyWithoutUserInput
    markings?: UserMarkingUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserUpdateInput = {
    user_id?: StringFieldUpdateOperationsInput | string
    user_name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    random_parts_num?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    parts?: UserPartUpdateManyWithoutUserNestedInput
    fortresses?: FortressUpdateManyWithoutUserNestedInput
    markings?: UserMarkingUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateInput = {
    user_id?: StringFieldUpdateOperationsInput | string
    user_name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    random_parts_num?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    parts?: UserPartUncheckedUpdateManyWithoutUserNestedInput
    fortresses?: FortressUncheckedUpdateManyWithoutUserNestedInput
    markings?: UserMarkingUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateManyInput = {
    user_id?: string
    user_name: string
    password: string
    random_parts_num?: number
    created_at?: Date | string
  }

  export type UserUpdateManyMutationInput = {
    user_id?: StringFieldUpdateOperationsInput | string
    user_name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    random_parts_num?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUncheckedUpdateManyInput = {
    user_id?: StringFieldUpdateOperationsInput | string
    user_name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    random_parts_num?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PartCreateInput = {
    shape: string
    material: MaterialCreateNestedOneWithoutPartsInput
    userParts?: UserPartCreateNestedManyWithoutPartInput
  }

  export type PartUncheckedCreateInput = {
    id?: number
    shape: string
    materialId: number
    userParts?: UserPartUncheckedCreateNestedManyWithoutPartInput
  }

  export type PartUpdateInput = {
    shape?: StringFieldUpdateOperationsInput | string
    material?: MaterialUpdateOneRequiredWithoutPartsNestedInput
    userParts?: UserPartUpdateManyWithoutPartNestedInput
  }

  export type PartUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    shape?: StringFieldUpdateOperationsInput | string
    materialId?: IntFieldUpdateOperationsInput | number
    userParts?: UserPartUncheckedUpdateManyWithoutPartNestedInput
  }

  export type PartCreateManyInput = {
    id?: number
    shape: string
    materialId: number
  }

  export type PartUpdateManyMutationInput = {
    shape?: StringFieldUpdateOperationsInput | string
  }

  export type PartUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    shape?: StringFieldUpdateOperationsInput | string
    materialId?: IntFieldUpdateOperationsInput | number
  }

  export type MaterialCreateInput = {
    name: string
    parts?: PartCreateNestedManyWithoutMaterialInput
  }

  export type MaterialUncheckedCreateInput = {
    id?: number
    name: string
    parts?: PartUncheckedCreateNestedManyWithoutMaterialInput
  }

  export type MaterialUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    parts?: PartUpdateManyWithoutMaterialNestedInput
  }

  export type MaterialUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    parts?: PartUncheckedUpdateManyWithoutMaterialNestedInput
  }

  export type MaterialCreateManyInput = {
    id?: number
    name: string
  }

  export type MaterialUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
  }

  export type MaterialUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
  }

  export type UserPartCreateInput = {
    domination: number
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutPartsInput
    part: PartCreateNestedOneWithoutUserPartsInput
  }

  export type UserPartUncheckedCreateInput = {
    id?: number
    userId: string
    partId: number
    domination: number
    createdAt?: Date | string
  }

  export type UserPartUpdateInput = {
    domination?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutPartsNestedInput
    part?: PartUpdateOneRequiredWithoutUserPartsNestedInput
  }

  export type UserPartUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: StringFieldUpdateOperationsInput | string
    partId?: IntFieldUpdateOperationsInput | number
    domination?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserPartCreateManyInput = {
    id?: number
    userId: string
    partId: number
    domination: number
    createdAt?: Date | string
  }

  export type UserPartUpdateManyMutationInput = {
    domination?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserPartUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: StringFieldUpdateOperationsInput | string
    partId?: IntFieldUpdateOperationsInput | number
    domination?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FortressCreateInput = {
    name: string
    createdAt?: Date | string
    parts: JsonNullValueInput | InputJsonValue
    score: number
    user: UserCreateNestedOneWithoutFortressesInput
  }

  export type FortressUncheckedCreateInput = {
    id?: number
    userId: string
    name: string
    createdAt?: Date | string
    parts: JsonNullValueInput | InputJsonValue
    score: number
  }

  export type FortressUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    parts?: JsonNullValueInput | InputJsonValue
    score?: IntFieldUpdateOperationsInput | number
    user?: UserUpdateOneRequiredWithoutFortressesNestedInput
  }

  export type FortressUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    parts?: JsonNullValueInput | InputJsonValue
    score?: IntFieldUpdateOperationsInput | number
  }

  export type FortressCreateManyInput = {
    id?: number
    userId: string
    name: string
    createdAt?: Date | string
    parts: JsonNullValueInput | InputJsonValue
    score: number
  }

  export type FortressUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    parts?: JsonNullValueInput | InputJsonValue
    score?: IntFieldUpdateOperationsInput | number
  }

  export type FortressUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    parts?: JsonNullValueInput | InputJsonValue
    score?: IntFieldUpdateOperationsInput | number
  }

  export type UserMarkingCreateInput = {
    x: number
    y: number
    region: string
    markType?: string
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutMarkingsInput
  }

  export type UserMarkingUncheckedCreateInput = {
    id?: number
    userId: string
    x: number
    y: number
    region: string
    markType?: string
    createdAt?: Date | string
  }

  export type UserMarkingUpdateInput = {
    x?: FloatFieldUpdateOperationsInput | number
    y?: FloatFieldUpdateOperationsInput | number
    region?: StringFieldUpdateOperationsInput | string
    markType?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutMarkingsNestedInput
  }

  export type UserMarkingUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: StringFieldUpdateOperationsInput | string
    x?: FloatFieldUpdateOperationsInput | number
    y?: FloatFieldUpdateOperationsInput | number
    region?: StringFieldUpdateOperationsInput | string
    markType?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserMarkingCreateManyInput = {
    id?: number
    userId: string
    x: number
    y: number
    region: string
    markType?: string
    createdAt?: Date | string
  }

  export type UserMarkingUpdateManyMutationInput = {
    x?: FloatFieldUpdateOperationsInput | number
    y?: FloatFieldUpdateOperationsInput | number
    region?: StringFieldUpdateOperationsInput | string
    markType?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserMarkingUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: StringFieldUpdateOperationsInput | string
    x?: FloatFieldUpdateOperationsInput | number
    y?: FloatFieldUpdateOperationsInput | number
    region?: StringFieldUpdateOperationsInput | string
    markType?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type UserPartListRelationFilter = {
    every?: UserPartWhereInput
    some?: UserPartWhereInput
    none?: UserPartWhereInput
  }

  export type FortressListRelationFilter = {
    every?: FortressWhereInput
    some?: FortressWhereInput
    none?: FortressWhereInput
  }

  export type UserMarkingListRelationFilter = {
    every?: UserMarkingWhereInput
    some?: UserMarkingWhereInput
    none?: UserMarkingWhereInput
  }

  export type UserPartOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type FortressOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserMarkingOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserUser_namePasswordCompoundUniqueInput = {
    user_name: string
    password: string
  }

  export type UserCountOrderByAggregateInput = {
    user_id?: SortOrder
    user_name?: SortOrder
    password?: SortOrder
    random_parts_num?: SortOrder
    created_at?: SortOrder
  }

  export type UserAvgOrderByAggregateInput = {
    random_parts_num?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    user_id?: SortOrder
    user_name?: SortOrder
    password?: SortOrder
    random_parts_num?: SortOrder
    created_at?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    user_id?: SortOrder
    user_name?: SortOrder
    password?: SortOrder
    random_parts_num?: SortOrder
    created_at?: SortOrder
  }

  export type UserSumOrderByAggregateInput = {
    random_parts_num?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type MaterialRelationFilter = {
    is?: MaterialWhereInput
    isNot?: MaterialWhereInput
  }

  export type PartCountOrderByAggregateInput = {
    id?: SortOrder
    shape?: SortOrder
    materialId?: SortOrder
  }

  export type PartAvgOrderByAggregateInput = {
    id?: SortOrder
    materialId?: SortOrder
  }

  export type PartMaxOrderByAggregateInput = {
    id?: SortOrder
    shape?: SortOrder
    materialId?: SortOrder
  }

  export type PartMinOrderByAggregateInput = {
    id?: SortOrder
    shape?: SortOrder
    materialId?: SortOrder
  }

  export type PartSumOrderByAggregateInput = {
    id?: SortOrder
    materialId?: SortOrder
  }

  export type PartListRelationFilter = {
    every?: PartWhereInput
    some?: PartWhereInput
    none?: PartWhereInput
  }

  export type PartOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type MaterialCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type MaterialAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type MaterialMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type MaterialMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type MaterialSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type FloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type UserRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type PartRelationFilter = {
    is?: PartWhereInput
    isNot?: PartWhereInput
  }

  export type UserPartCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    partId?: SortOrder
    domination?: SortOrder
    createdAt?: SortOrder
  }

  export type UserPartAvgOrderByAggregateInput = {
    id?: SortOrder
    partId?: SortOrder
    domination?: SortOrder
  }

  export type UserPartMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    partId?: SortOrder
    domination?: SortOrder
    createdAt?: SortOrder
  }

  export type UserPartMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    partId?: SortOrder
    domination?: SortOrder
    createdAt?: SortOrder
  }

  export type UserPartSumOrderByAggregateInput = {
    id?: SortOrder
    partId?: SortOrder
    domination?: SortOrder
  }

  export type FloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }
  export type JsonFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<JsonFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonFilterBase<$PrismaModel>>, 'path'>>

  export type JsonFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue
    lte?: InputJsonValue
    gt?: InputJsonValue
    gte?: InputJsonValue
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type FortressCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    parts?: SortOrder
    score?: SortOrder
  }

  export type FortressAvgOrderByAggregateInput = {
    id?: SortOrder
    score?: SortOrder
  }

  export type FortressMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    score?: SortOrder
  }

  export type FortressMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    score?: SortOrder
  }

  export type FortressSumOrderByAggregateInput = {
    id?: SortOrder
    score?: SortOrder
  }
  export type JsonWithAggregatesFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<JsonWithAggregatesFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonWithAggregatesFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonWithAggregatesFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonWithAggregatesFilterBase<$PrismaModel>>, 'path'>>

  export type JsonWithAggregatesFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue
    lte?: InputJsonValue
    gt?: InputJsonValue
    gte?: InputJsonValue
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedJsonFilter<$PrismaModel>
    _max?: NestedJsonFilter<$PrismaModel>
  }

  export type UserMarkingCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    x?: SortOrder
    y?: SortOrder
    region?: SortOrder
    markType?: SortOrder
    createdAt?: SortOrder
  }

  export type UserMarkingAvgOrderByAggregateInput = {
    id?: SortOrder
    x?: SortOrder
    y?: SortOrder
  }

  export type UserMarkingMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    x?: SortOrder
    y?: SortOrder
    region?: SortOrder
    markType?: SortOrder
    createdAt?: SortOrder
  }

  export type UserMarkingMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    x?: SortOrder
    y?: SortOrder
    region?: SortOrder
    markType?: SortOrder
    createdAt?: SortOrder
  }

  export type UserMarkingSumOrderByAggregateInput = {
    id?: SortOrder
    x?: SortOrder
    y?: SortOrder
  }

  export type UserPartCreateNestedManyWithoutUserInput = {
    create?: XOR<UserPartCreateWithoutUserInput, UserPartUncheckedCreateWithoutUserInput> | UserPartCreateWithoutUserInput[] | UserPartUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserPartCreateOrConnectWithoutUserInput | UserPartCreateOrConnectWithoutUserInput[]
    createMany?: UserPartCreateManyUserInputEnvelope
    connect?: UserPartWhereUniqueInput | UserPartWhereUniqueInput[]
  }

  export type FortressCreateNestedManyWithoutUserInput = {
    create?: XOR<FortressCreateWithoutUserInput, FortressUncheckedCreateWithoutUserInput> | FortressCreateWithoutUserInput[] | FortressUncheckedCreateWithoutUserInput[]
    connectOrCreate?: FortressCreateOrConnectWithoutUserInput | FortressCreateOrConnectWithoutUserInput[]
    createMany?: FortressCreateManyUserInputEnvelope
    connect?: FortressWhereUniqueInput | FortressWhereUniqueInput[]
  }

  export type UserMarkingCreateNestedManyWithoutUserInput = {
    create?: XOR<UserMarkingCreateWithoutUserInput, UserMarkingUncheckedCreateWithoutUserInput> | UserMarkingCreateWithoutUserInput[] | UserMarkingUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserMarkingCreateOrConnectWithoutUserInput | UserMarkingCreateOrConnectWithoutUserInput[]
    createMany?: UserMarkingCreateManyUserInputEnvelope
    connect?: UserMarkingWhereUniqueInput | UserMarkingWhereUniqueInput[]
  }

  export type UserPartUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<UserPartCreateWithoutUserInput, UserPartUncheckedCreateWithoutUserInput> | UserPartCreateWithoutUserInput[] | UserPartUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserPartCreateOrConnectWithoutUserInput | UserPartCreateOrConnectWithoutUserInput[]
    createMany?: UserPartCreateManyUserInputEnvelope
    connect?: UserPartWhereUniqueInput | UserPartWhereUniqueInput[]
  }

  export type FortressUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<FortressCreateWithoutUserInput, FortressUncheckedCreateWithoutUserInput> | FortressCreateWithoutUserInput[] | FortressUncheckedCreateWithoutUserInput[]
    connectOrCreate?: FortressCreateOrConnectWithoutUserInput | FortressCreateOrConnectWithoutUserInput[]
    createMany?: FortressCreateManyUserInputEnvelope
    connect?: FortressWhereUniqueInput | FortressWhereUniqueInput[]
  }

  export type UserMarkingUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<UserMarkingCreateWithoutUserInput, UserMarkingUncheckedCreateWithoutUserInput> | UserMarkingCreateWithoutUserInput[] | UserMarkingUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserMarkingCreateOrConnectWithoutUserInput | UserMarkingCreateOrConnectWithoutUserInput[]
    createMany?: UserMarkingCreateManyUserInputEnvelope
    connect?: UserMarkingWhereUniqueInput | UserMarkingWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type UserPartUpdateManyWithoutUserNestedInput = {
    create?: XOR<UserPartCreateWithoutUserInput, UserPartUncheckedCreateWithoutUserInput> | UserPartCreateWithoutUserInput[] | UserPartUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserPartCreateOrConnectWithoutUserInput | UserPartCreateOrConnectWithoutUserInput[]
    upsert?: UserPartUpsertWithWhereUniqueWithoutUserInput | UserPartUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: UserPartCreateManyUserInputEnvelope
    set?: UserPartWhereUniqueInput | UserPartWhereUniqueInput[]
    disconnect?: UserPartWhereUniqueInput | UserPartWhereUniqueInput[]
    delete?: UserPartWhereUniqueInput | UserPartWhereUniqueInput[]
    connect?: UserPartWhereUniqueInput | UserPartWhereUniqueInput[]
    update?: UserPartUpdateWithWhereUniqueWithoutUserInput | UserPartUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: UserPartUpdateManyWithWhereWithoutUserInput | UserPartUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: UserPartScalarWhereInput | UserPartScalarWhereInput[]
  }

  export type FortressUpdateManyWithoutUserNestedInput = {
    create?: XOR<FortressCreateWithoutUserInput, FortressUncheckedCreateWithoutUserInput> | FortressCreateWithoutUserInput[] | FortressUncheckedCreateWithoutUserInput[]
    connectOrCreate?: FortressCreateOrConnectWithoutUserInput | FortressCreateOrConnectWithoutUserInput[]
    upsert?: FortressUpsertWithWhereUniqueWithoutUserInput | FortressUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: FortressCreateManyUserInputEnvelope
    set?: FortressWhereUniqueInput | FortressWhereUniqueInput[]
    disconnect?: FortressWhereUniqueInput | FortressWhereUniqueInput[]
    delete?: FortressWhereUniqueInput | FortressWhereUniqueInput[]
    connect?: FortressWhereUniqueInput | FortressWhereUniqueInput[]
    update?: FortressUpdateWithWhereUniqueWithoutUserInput | FortressUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: FortressUpdateManyWithWhereWithoutUserInput | FortressUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: FortressScalarWhereInput | FortressScalarWhereInput[]
  }

  export type UserMarkingUpdateManyWithoutUserNestedInput = {
    create?: XOR<UserMarkingCreateWithoutUserInput, UserMarkingUncheckedCreateWithoutUserInput> | UserMarkingCreateWithoutUserInput[] | UserMarkingUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserMarkingCreateOrConnectWithoutUserInput | UserMarkingCreateOrConnectWithoutUserInput[]
    upsert?: UserMarkingUpsertWithWhereUniqueWithoutUserInput | UserMarkingUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: UserMarkingCreateManyUserInputEnvelope
    set?: UserMarkingWhereUniqueInput | UserMarkingWhereUniqueInput[]
    disconnect?: UserMarkingWhereUniqueInput | UserMarkingWhereUniqueInput[]
    delete?: UserMarkingWhereUniqueInput | UserMarkingWhereUniqueInput[]
    connect?: UserMarkingWhereUniqueInput | UserMarkingWhereUniqueInput[]
    update?: UserMarkingUpdateWithWhereUniqueWithoutUserInput | UserMarkingUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: UserMarkingUpdateManyWithWhereWithoutUserInput | UserMarkingUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: UserMarkingScalarWhereInput | UserMarkingScalarWhereInput[]
  }

  export type UserPartUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<UserPartCreateWithoutUserInput, UserPartUncheckedCreateWithoutUserInput> | UserPartCreateWithoutUserInput[] | UserPartUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserPartCreateOrConnectWithoutUserInput | UserPartCreateOrConnectWithoutUserInput[]
    upsert?: UserPartUpsertWithWhereUniqueWithoutUserInput | UserPartUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: UserPartCreateManyUserInputEnvelope
    set?: UserPartWhereUniqueInput | UserPartWhereUniqueInput[]
    disconnect?: UserPartWhereUniqueInput | UserPartWhereUniqueInput[]
    delete?: UserPartWhereUniqueInput | UserPartWhereUniqueInput[]
    connect?: UserPartWhereUniqueInput | UserPartWhereUniqueInput[]
    update?: UserPartUpdateWithWhereUniqueWithoutUserInput | UserPartUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: UserPartUpdateManyWithWhereWithoutUserInput | UserPartUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: UserPartScalarWhereInput | UserPartScalarWhereInput[]
  }

  export type FortressUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<FortressCreateWithoutUserInput, FortressUncheckedCreateWithoutUserInput> | FortressCreateWithoutUserInput[] | FortressUncheckedCreateWithoutUserInput[]
    connectOrCreate?: FortressCreateOrConnectWithoutUserInput | FortressCreateOrConnectWithoutUserInput[]
    upsert?: FortressUpsertWithWhereUniqueWithoutUserInput | FortressUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: FortressCreateManyUserInputEnvelope
    set?: FortressWhereUniqueInput | FortressWhereUniqueInput[]
    disconnect?: FortressWhereUniqueInput | FortressWhereUniqueInput[]
    delete?: FortressWhereUniqueInput | FortressWhereUniqueInput[]
    connect?: FortressWhereUniqueInput | FortressWhereUniqueInput[]
    update?: FortressUpdateWithWhereUniqueWithoutUserInput | FortressUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: FortressUpdateManyWithWhereWithoutUserInput | FortressUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: FortressScalarWhereInput | FortressScalarWhereInput[]
  }

  export type UserMarkingUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<UserMarkingCreateWithoutUserInput, UserMarkingUncheckedCreateWithoutUserInput> | UserMarkingCreateWithoutUserInput[] | UserMarkingUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserMarkingCreateOrConnectWithoutUserInput | UserMarkingCreateOrConnectWithoutUserInput[]
    upsert?: UserMarkingUpsertWithWhereUniqueWithoutUserInput | UserMarkingUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: UserMarkingCreateManyUserInputEnvelope
    set?: UserMarkingWhereUniqueInput | UserMarkingWhereUniqueInput[]
    disconnect?: UserMarkingWhereUniqueInput | UserMarkingWhereUniqueInput[]
    delete?: UserMarkingWhereUniqueInput | UserMarkingWhereUniqueInput[]
    connect?: UserMarkingWhereUniqueInput | UserMarkingWhereUniqueInput[]
    update?: UserMarkingUpdateWithWhereUniqueWithoutUserInput | UserMarkingUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: UserMarkingUpdateManyWithWhereWithoutUserInput | UserMarkingUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: UserMarkingScalarWhereInput | UserMarkingScalarWhereInput[]
  }

  export type MaterialCreateNestedOneWithoutPartsInput = {
    create?: XOR<MaterialCreateWithoutPartsInput, MaterialUncheckedCreateWithoutPartsInput>
    connectOrCreate?: MaterialCreateOrConnectWithoutPartsInput
    connect?: MaterialWhereUniqueInput
  }

  export type UserPartCreateNestedManyWithoutPartInput = {
    create?: XOR<UserPartCreateWithoutPartInput, UserPartUncheckedCreateWithoutPartInput> | UserPartCreateWithoutPartInput[] | UserPartUncheckedCreateWithoutPartInput[]
    connectOrCreate?: UserPartCreateOrConnectWithoutPartInput | UserPartCreateOrConnectWithoutPartInput[]
    createMany?: UserPartCreateManyPartInputEnvelope
    connect?: UserPartWhereUniqueInput | UserPartWhereUniqueInput[]
  }

  export type UserPartUncheckedCreateNestedManyWithoutPartInput = {
    create?: XOR<UserPartCreateWithoutPartInput, UserPartUncheckedCreateWithoutPartInput> | UserPartCreateWithoutPartInput[] | UserPartUncheckedCreateWithoutPartInput[]
    connectOrCreate?: UserPartCreateOrConnectWithoutPartInput | UserPartCreateOrConnectWithoutPartInput[]
    createMany?: UserPartCreateManyPartInputEnvelope
    connect?: UserPartWhereUniqueInput | UserPartWhereUniqueInput[]
  }

  export type MaterialUpdateOneRequiredWithoutPartsNestedInput = {
    create?: XOR<MaterialCreateWithoutPartsInput, MaterialUncheckedCreateWithoutPartsInput>
    connectOrCreate?: MaterialCreateOrConnectWithoutPartsInput
    upsert?: MaterialUpsertWithoutPartsInput
    connect?: MaterialWhereUniqueInput
    update?: XOR<XOR<MaterialUpdateToOneWithWhereWithoutPartsInput, MaterialUpdateWithoutPartsInput>, MaterialUncheckedUpdateWithoutPartsInput>
  }

  export type UserPartUpdateManyWithoutPartNestedInput = {
    create?: XOR<UserPartCreateWithoutPartInput, UserPartUncheckedCreateWithoutPartInput> | UserPartCreateWithoutPartInput[] | UserPartUncheckedCreateWithoutPartInput[]
    connectOrCreate?: UserPartCreateOrConnectWithoutPartInput | UserPartCreateOrConnectWithoutPartInput[]
    upsert?: UserPartUpsertWithWhereUniqueWithoutPartInput | UserPartUpsertWithWhereUniqueWithoutPartInput[]
    createMany?: UserPartCreateManyPartInputEnvelope
    set?: UserPartWhereUniqueInput | UserPartWhereUniqueInput[]
    disconnect?: UserPartWhereUniqueInput | UserPartWhereUniqueInput[]
    delete?: UserPartWhereUniqueInput | UserPartWhereUniqueInput[]
    connect?: UserPartWhereUniqueInput | UserPartWhereUniqueInput[]
    update?: UserPartUpdateWithWhereUniqueWithoutPartInput | UserPartUpdateWithWhereUniqueWithoutPartInput[]
    updateMany?: UserPartUpdateManyWithWhereWithoutPartInput | UserPartUpdateManyWithWhereWithoutPartInput[]
    deleteMany?: UserPartScalarWhereInput | UserPartScalarWhereInput[]
  }

  export type UserPartUncheckedUpdateManyWithoutPartNestedInput = {
    create?: XOR<UserPartCreateWithoutPartInput, UserPartUncheckedCreateWithoutPartInput> | UserPartCreateWithoutPartInput[] | UserPartUncheckedCreateWithoutPartInput[]
    connectOrCreate?: UserPartCreateOrConnectWithoutPartInput | UserPartCreateOrConnectWithoutPartInput[]
    upsert?: UserPartUpsertWithWhereUniqueWithoutPartInput | UserPartUpsertWithWhereUniqueWithoutPartInput[]
    createMany?: UserPartCreateManyPartInputEnvelope
    set?: UserPartWhereUniqueInput | UserPartWhereUniqueInput[]
    disconnect?: UserPartWhereUniqueInput | UserPartWhereUniqueInput[]
    delete?: UserPartWhereUniqueInput | UserPartWhereUniqueInput[]
    connect?: UserPartWhereUniqueInput | UserPartWhereUniqueInput[]
    update?: UserPartUpdateWithWhereUniqueWithoutPartInput | UserPartUpdateWithWhereUniqueWithoutPartInput[]
    updateMany?: UserPartUpdateManyWithWhereWithoutPartInput | UserPartUpdateManyWithWhereWithoutPartInput[]
    deleteMany?: UserPartScalarWhereInput | UserPartScalarWhereInput[]
  }

  export type PartCreateNestedManyWithoutMaterialInput = {
    create?: XOR<PartCreateWithoutMaterialInput, PartUncheckedCreateWithoutMaterialInput> | PartCreateWithoutMaterialInput[] | PartUncheckedCreateWithoutMaterialInput[]
    connectOrCreate?: PartCreateOrConnectWithoutMaterialInput | PartCreateOrConnectWithoutMaterialInput[]
    createMany?: PartCreateManyMaterialInputEnvelope
    connect?: PartWhereUniqueInput | PartWhereUniqueInput[]
  }

  export type PartUncheckedCreateNestedManyWithoutMaterialInput = {
    create?: XOR<PartCreateWithoutMaterialInput, PartUncheckedCreateWithoutMaterialInput> | PartCreateWithoutMaterialInput[] | PartUncheckedCreateWithoutMaterialInput[]
    connectOrCreate?: PartCreateOrConnectWithoutMaterialInput | PartCreateOrConnectWithoutMaterialInput[]
    createMany?: PartCreateManyMaterialInputEnvelope
    connect?: PartWhereUniqueInput | PartWhereUniqueInput[]
  }

  export type PartUpdateManyWithoutMaterialNestedInput = {
    create?: XOR<PartCreateWithoutMaterialInput, PartUncheckedCreateWithoutMaterialInput> | PartCreateWithoutMaterialInput[] | PartUncheckedCreateWithoutMaterialInput[]
    connectOrCreate?: PartCreateOrConnectWithoutMaterialInput | PartCreateOrConnectWithoutMaterialInput[]
    upsert?: PartUpsertWithWhereUniqueWithoutMaterialInput | PartUpsertWithWhereUniqueWithoutMaterialInput[]
    createMany?: PartCreateManyMaterialInputEnvelope
    set?: PartWhereUniqueInput | PartWhereUniqueInput[]
    disconnect?: PartWhereUniqueInput | PartWhereUniqueInput[]
    delete?: PartWhereUniqueInput | PartWhereUniqueInput[]
    connect?: PartWhereUniqueInput | PartWhereUniqueInput[]
    update?: PartUpdateWithWhereUniqueWithoutMaterialInput | PartUpdateWithWhereUniqueWithoutMaterialInput[]
    updateMany?: PartUpdateManyWithWhereWithoutMaterialInput | PartUpdateManyWithWhereWithoutMaterialInput[]
    deleteMany?: PartScalarWhereInput | PartScalarWhereInput[]
  }

  export type PartUncheckedUpdateManyWithoutMaterialNestedInput = {
    create?: XOR<PartCreateWithoutMaterialInput, PartUncheckedCreateWithoutMaterialInput> | PartCreateWithoutMaterialInput[] | PartUncheckedCreateWithoutMaterialInput[]
    connectOrCreate?: PartCreateOrConnectWithoutMaterialInput | PartCreateOrConnectWithoutMaterialInput[]
    upsert?: PartUpsertWithWhereUniqueWithoutMaterialInput | PartUpsertWithWhereUniqueWithoutMaterialInput[]
    createMany?: PartCreateManyMaterialInputEnvelope
    set?: PartWhereUniqueInput | PartWhereUniqueInput[]
    disconnect?: PartWhereUniqueInput | PartWhereUniqueInput[]
    delete?: PartWhereUniqueInput | PartWhereUniqueInput[]
    connect?: PartWhereUniqueInput | PartWhereUniqueInput[]
    update?: PartUpdateWithWhereUniqueWithoutMaterialInput | PartUpdateWithWhereUniqueWithoutMaterialInput[]
    updateMany?: PartUpdateManyWithWhereWithoutMaterialInput | PartUpdateManyWithWhereWithoutMaterialInput[]
    deleteMany?: PartScalarWhereInput | PartScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutPartsInput = {
    create?: XOR<UserCreateWithoutPartsInput, UserUncheckedCreateWithoutPartsInput>
    connectOrCreate?: UserCreateOrConnectWithoutPartsInput
    connect?: UserWhereUniqueInput
  }

  export type PartCreateNestedOneWithoutUserPartsInput = {
    create?: XOR<PartCreateWithoutUserPartsInput, PartUncheckedCreateWithoutUserPartsInput>
    connectOrCreate?: PartCreateOrConnectWithoutUserPartsInput
    connect?: PartWhereUniqueInput
  }

  export type FloatFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type UserUpdateOneRequiredWithoutPartsNestedInput = {
    create?: XOR<UserCreateWithoutPartsInput, UserUncheckedCreateWithoutPartsInput>
    connectOrCreate?: UserCreateOrConnectWithoutPartsInput
    upsert?: UserUpsertWithoutPartsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutPartsInput, UserUpdateWithoutPartsInput>, UserUncheckedUpdateWithoutPartsInput>
  }

  export type PartUpdateOneRequiredWithoutUserPartsNestedInput = {
    create?: XOR<PartCreateWithoutUserPartsInput, PartUncheckedCreateWithoutUserPartsInput>
    connectOrCreate?: PartCreateOrConnectWithoutUserPartsInput
    upsert?: PartUpsertWithoutUserPartsInput
    connect?: PartWhereUniqueInput
    update?: XOR<XOR<PartUpdateToOneWithWhereWithoutUserPartsInput, PartUpdateWithoutUserPartsInput>, PartUncheckedUpdateWithoutUserPartsInput>
  }

  export type UserCreateNestedOneWithoutFortressesInput = {
    create?: XOR<UserCreateWithoutFortressesInput, UserUncheckedCreateWithoutFortressesInput>
    connectOrCreate?: UserCreateOrConnectWithoutFortressesInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutFortressesNestedInput = {
    create?: XOR<UserCreateWithoutFortressesInput, UserUncheckedCreateWithoutFortressesInput>
    connectOrCreate?: UserCreateOrConnectWithoutFortressesInput
    upsert?: UserUpsertWithoutFortressesInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutFortressesInput, UserUpdateWithoutFortressesInput>, UserUncheckedUpdateWithoutFortressesInput>
  }

  export type UserCreateNestedOneWithoutMarkingsInput = {
    create?: XOR<UserCreateWithoutMarkingsInput, UserUncheckedCreateWithoutMarkingsInput>
    connectOrCreate?: UserCreateOrConnectWithoutMarkingsInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutMarkingsNestedInput = {
    create?: XOR<UserCreateWithoutMarkingsInput, UserUncheckedCreateWithoutMarkingsInput>
    connectOrCreate?: UserCreateOrConnectWithoutMarkingsInput
    upsert?: UserUpsertWithoutMarkingsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutMarkingsInput, UserUpdateWithoutMarkingsInput>, UserUncheckedUpdateWithoutMarkingsInput>
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedFloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }
  export type NestedJsonFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<NestedJsonFilterBase<$PrismaModel>>, Exclude<keyof Required<NestedJsonFilterBase<$PrismaModel>>, 'path'>>,
        Required<NestedJsonFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<NestedJsonFilterBase<$PrismaModel>>, 'path'>>

  export type NestedJsonFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue
    lte?: InputJsonValue
    gt?: InputJsonValue
    gte?: InputJsonValue
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type UserPartCreateWithoutUserInput = {
    domination: number
    createdAt?: Date | string
    part: PartCreateNestedOneWithoutUserPartsInput
  }

  export type UserPartUncheckedCreateWithoutUserInput = {
    id?: number
    partId: number
    domination: number
    createdAt?: Date | string
  }

  export type UserPartCreateOrConnectWithoutUserInput = {
    where: UserPartWhereUniqueInput
    create: XOR<UserPartCreateWithoutUserInput, UserPartUncheckedCreateWithoutUserInput>
  }

  export type UserPartCreateManyUserInputEnvelope = {
    data: UserPartCreateManyUserInput | UserPartCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type FortressCreateWithoutUserInput = {
    name: string
    createdAt?: Date | string
    parts: JsonNullValueInput | InputJsonValue
    score: number
  }

  export type FortressUncheckedCreateWithoutUserInput = {
    id?: number
    name: string
    createdAt?: Date | string
    parts: JsonNullValueInput | InputJsonValue
    score: number
  }

  export type FortressCreateOrConnectWithoutUserInput = {
    where: FortressWhereUniqueInput
    create: XOR<FortressCreateWithoutUserInput, FortressUncheckedCreateWithoutUserInput>
  }

  export type FortressCreateManyUserInputEnvelope = {
    data: FortressCreateManyUserInput | FortressCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type UserMarkingCreateWithoutUserInput = {
    x: number
    y: number
    region: string
    markType?: string
    createdAt?: Date | string
  }

  export type UserMarkingUncheckedCreateWithoutUserInput = {
    id?: number
    x: number
    y: number
    region: string
    markType?: string
    createdAt?: Date | string
  }

  export type UserMarkingCreateOrConnectWithoutUserInput = {
    where: UserMarkingWhereUniqueInput
    create: XOR<UserMarkingCreateWithoutUserInput, UserMarkingUncheckedCreateWithoutUserInput>
  }

  export type UserMarkingCreateManyUserInputEnvelope = {
    data: UserMarkingCreateManyUserInput | UserMarkingCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type UserPartUpsertWithWhereUniqueWithoutUserInput = {
    where: UserPartWhereUniqueInput
    update: XOR<UserPartUpdateWithoutUserInput, UserPartUncheckedUpdateWithoutUserInput>
    create: XOR<UserPartCreateWithoutUserInput, UserPartUncheckedCreateWithoutUserInput>
  }

  export type UserPartUpdateWithWhereUniqueWithoutUserInput = {
    where: UserPartWhereUniqueInput
    data: XOR<UserPartUpdateWithoutUserInput, UserPartUncheckedUpdateWithoutUserInput>
  }

  export type UserPartUpdateManyWithWhereWithoutUserInput = {
    where: UserPartScalarWhereInput
    data: XOR<UserPartUpdateManyMutationInput, UserPartUncheckedUpdateManyWithoutUserInput>
  }

  export type UserPartScalarWhereInput = {
    AND?: UserPartScalarWhereInput | UserPartScalarWhereInput[]
    OR?: UserPartScalarWhereInput[]
    NOT?: UserPartScalarWhereInput | UserPartScalarWhereInput[]
    id?: IntFilter<"UserPart"> | number
    userId?: StringFilter<"UserPart"> | string
    partId?: IntFilter<"UserPart"> | number
    domination?: FloatFilter<"UserPart"> | number
    createdAt?: DateTimeFilter<"UserPart"> | Date | string
  }

  export type FortressUpsertWithWhereUniqueWithoutUserInput = {
    where: FortressWhereUniqueInput
    update: XOR<FortressUpdateWithoutUserInput, FortressUncheckedUpdateWithoutUserInput>
    create: XOR<FortressCreateWithoutUserInput, FortressUncheckedCreateWithoutUserInput>
  }

  export type FortressUpdateWithWhereUniqueWithoutUserInput = {
    where: FortressWhereUniqueInput
    data: XOR<FortressUpdateWithoutUserInput, FortressUncheckedUpdateWithoutUserInput>
  }

  export type FortressUpdateManyWithWhereWithoutUserInput = {
    where: FortressScalarWhereInput
    data: XOR<FortressUpdateManyMutationInput, FortressUncheckedUpdateManyWithoutUserInput>
  }

  export type FortressScalarWhereInput = {
    AND?: FortressScalarWhereInput | FortressScalarWhereInput[]
    OR?: FortressScalarWhereInput[]
    NOT?: FortressScalarWhereInput | FortressScalarWhereInput[]
    id?: IntFilter<"Fortress"> | number
    userId?: StringFilter<"Fortress"> | string
    name?: StringFilter<"Fortress"> | string
    createdAt?: DateTimeFilter<"Fortress"> | Date | string
    parts?: JsonFilter<"Fortress">
    score?: IntFilter<"Fortress"> | number
  }

  export type UserMarkingUpsertWithWhereUniqueWithoutUserInput = {
    where: UserMarkingWhereUniqueInput
    update: XOR<UserMarkingUpdateWithoutUserInput, UserMarkingUncheckedUpdateWithoutUserInput>
    create: XOR<UserMarkingCreateWithoutUserInput, UserMarkingUncheckedCreateWithoutUserInput>
  }

  export type UserMarkingUpdateWithWhereUniqueWithoutUserInput = {
    where: UserMarkingWhereUniqueInput
    data: XOR<UserMarkingUpdateWithoutUserInput, UserMarkingUncheckedUpdateWithoutUserInput>
  }

  export type UserMarkingUpdateManyWithWhereWithoutUserInput = {
    where: UserMarkingScalarWhereInput
    data: XOR<UserMarkingUpdateManyMutationInput, UserMarkingUncheckedUpdateManyWithoutUserInput>
  }

  export type UserMarkingScalarWhereInput = {
    AND?: UserMarkingScalarWhereInput | UserMarkingScalarWhereInput[]
    OR?: UserMarkingScalarWhereInput[]
    NOT?: UserMarkingScalarWhereInput | UserMarkingScalarWhereInput[]
    id?: IntFilter<"UserMarking"> | number
    userId?: StringFilter<"UserMarking"> | string
    x?: FloatFilter<"UserMarking"> | number
    y?: FloatFilter<"UserMarking"> | number
    region?: StringFilter<"UserMarking"> | string
    markType?: StringFilter<"UserMarking"> | string
    createdAt?: DateTimeFilter<"UserMarking"> | Date | string
  }

  export type MaterialCreateWithoutPartsInput = {
    name: string
  }

  export type MaterialUncheckedCreateWithoutPartsInput = {
    id?: number
    name: string
  }

  export type MaterialCreateOrConnectWithoutPartsInput = {
    where: MaterialWhereUniqueInput
    create: XOR<MaterialCreateWithoutPartsInput, MaterialUncheckedCreateWithoutPartsInput>
  }

  export type UserPartCreateWithoutPartInput = {
    domination: number
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutPartsInput
  }

  export type UserPartUncheckedCreateWithoutPartInput = {
    id?: number
    userId: string
    domination: number
    createdAt?: Date | string
  }

  export type UserPartCreateOrConnectWithoutPartInput = {
    where: UserPartWhereUniqueInput
    create: XOR<UserPartCreateWithoutPartInput, UserPartUncheckedCreateWithoutPartInput>
  }

  export type UserPartCreateManyPartInputEnvelope = {
    data: UserPartCreateManyPartInput | UserPartCreateManyPartInput[]
    skipDuplicates?: boolean
  }

  export type MaterialUpsertWithoutPartsInput = {
    update: XOR<MaterialUpdateWithoutPartsInput, MaterialUncheckedUpdateWithoutPartsInput>
    create: XOR<MaterialCreateWithoutPartsInput, MaterialUncheckedCreateWithoutPartsInput>
    where?: MaterialWhereInput
  }

  export type MaterialUpdateToOneWithWhereWithoutPartsInput = {
    where?: MaterialWhereInput
    data: XOR<MaterialUpdateWithoutPartsInput, MaterialUncheckedUpdateWithoutPartsInput>
  }

  export type MaterialUpdateWithoutPartsInput = {
    name?: StringFieldUpdateOperationsInput | string
  }

  export type MaterialUncheckedUpdateWithoutPartsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
  }

  export type UserPartUpsertWithWhereUniqueWithoutPartInput = {
    where: UserPartWhereUniqueInput
    update: XOR<UserPartUpdateWithoutPartInput, UserPartUncheckedUpdateWithoutPartInput>
    create: XOR<UserPartCreateWithoutPartInput, UserPartUncheckedCreateWithoutPartInput>
  }

  export type UserPartUpdateWithWhereUniqueWithoutPartInput = {
    where: UserPartWhereUniqueInput
    data: XOR<UserPartUpdateWithoutPartInput, UserPartUncheckedUpdateWithoutPartInput>
  }

  export type UserPartUpdateManyWithWhereWithoutPartInput = {
    where: UserPartScalarWhereInput
    data: XOR<UserPartUpdateManyMutationInput, UserPartUncheckedUpdateManyWithoutPartInput>
  }

  export type PartCreateWithoutMaterialInput = {
    shape: string
    userParts?: UserPartCreateNestedManyWithoutPartInput
  }

  export type PartUncheckedCreateWithoutMaterialInput = {
    id?: number
    shape: string
    userParts?: UserPartUncheckedCreateNestedManyWithoutPartInput
  }

  export type PartCreateOrConnectWithoutMaterialInput = {
    where: PartWhereUniqueInput
    create: XOR<PartCreateWithoutMaterialInput, PartUncheckedCreateWithoutMaterialInput>
  }

  export type PartCreateManyMaterialInputEnvelope = {
    data: PartCreateManyMaterialInput | PartCreateManyMaterialInput[]
    skipDuplicates?: boolean
  }

  export type PartUpsertWithWhereUniqueWithoutMaterialInput = {
    where: PartWhereUniqueInput
    update: XOR<PartUpdateWithoutMaterialInput, PartUncheckedUpdateWithoutMaterialInput>
    create: XOR<PartCreateWithoutMaterialInput, PartUncheckedCreateWithoutMaterialInput>
  }

  export type PartUpdateWithWhereUniqueWithoutMaterialInput = {
    where: PartWhereUniqueInput
    data: XOR<PartUpdateWithoutMaterialInput, PartUncheckedUpdateWithoutMaterialInput>
  }

  export type PartUpdateManyWithWhereWithoutMaterialInput = {
    where: PartScalarWhereInput
    data: XOR<PartUpdateManyMutationInput, PartUncheckedUpdateManyWithoutMaterialInput>
  }

  export type PartScalarWhereInput = {
    AND?: PartScalarWhereInput | PartScalarWhereInput[]
    OR?: PartScalarWhereInput[]
    NOT?: PartScalarWhereInput | PartScalarWhereInput[]
    id?: IntFilter<"Part"> | number
    shape?: StringFilter<"Part"> | string
    materialId?: IntFilter<"Part"> | number
  }

  export type UserCreateWithoutPartsInput = {
    user_id?: string
    user_name: string
    password: string
    random_parts_num?: number
    created_at?: Date | string
    fortresses?: FortressCreateNestedManyWithoutUserInput
    markings?: UserMarkingCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutPartsInput = {
    user_id?: string
    user_name: string
    password: string
    random_parts_num?: number
    created_at?: Date | string
    fortresses?: FortressUncheckedCreateNestedManyWithoutUserInput
    markings?: UserMarkingUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutPartsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutPartsInput, UserUncheckedCreateWithoutPartsInput>
  }

  export type PartCreateWithoutUserPartsInput = {
    shape: string
    material: MaterialCreateNestedOneWithoutPartsInput
  }

  export type PartUncheckedCreateWithoutUserPartsInput = {
    id?: number
    shape: string
    materialId: number
  }

  export type PartCreateOrConnectWithoutUserPartsInput = {
    where: PartWhereUniqueInput
    create: XOR<PartCreateWithoutUserPartsInput, PartUncheckedCreateWithoutUserPartsInput>
  }

  export type UserUpsertWithoutPartsInput = {
    update: XOR<UserUpdateWithoutPartsInput, UserUncheckedUpdateWithoutPartsInput>
    create: XOR<UserCreateWithoutPartsInput, UserUncheckedCreateWithoutPartsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutPartsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutPartsInput, UserUncheckedUpdateWithoutPartsInput>
  }

  export type UserUpdateWithoutPartsInput = {
    user_id?: StringFieldUpdateOperationsInput | string
    user_name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    random_parts_num?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    fortresses?: FortressUpdateManyWithoutUserNestedInput
    markings?: UserMarkingUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutPartsInput = {
    user_id?: StringFieldUpdateOperationsInput | string
    user_name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    random_parts_num?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    fortresses?: FortressUncheckedUpdateManyWithoutUserNestedInput
    markings?: UserMarkingUncheckedUpdateManyWithoutUserNestedInput
  }

  export type PartUpsertWithoutUserPartsInput = {
    update: XOR<PartUpdateWithoutUserPartsInput, PartUncheckedUpdateWithoutUserPartsInput>
    create: XOR<PartCreateWithoutUserPartsInput, PartUncheckedCreateWithoutUserPartsInput>
    where?: PartWhereInput
  }

  export type PartUpdateToOneWithWhereWithoutUserPartsInput = {
    where?: PartWhereInput
    data: XOR<PartUpdateWithoutUserPartsInput, PartUncheckedUpdateWithoutUserPartsInput>
  }

  export type PartUpdateWithoutUserPartsInput = {
    shape?: StringFieldUpdateOperationsInput | string
    material?: MaterialUpdateOneRequiredWithoutPartsNestedInput
  }

  export type PartUncheckedUpdateWithoutUserPartsInput = {
    id?: IntFieldUpdateOperationsInput | number
    shape?: StringFieldUpdateOperationsInput | string
    materialId?: IntFieldUpdateOperationsInput | number
  }

  export type UserCreateWithoutFortressesInput = {
    user_id?: string
    user_name: string
    password: string
    random_parts_num?: number
    created_at?: Date | string
    parts?: UserPartCreateNestedManyWithoutUserInput
    markings?: UserMarkingCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutFortressesInput = {
    user_id?: string
    user_name: string
    password: string
    random_parts_num?: number
    created_at?: Date | string
    parts?: UserPartUncheckedCreateNestedManyWithoutUserInput
    markings?: UserMarkingUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutFortressesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutFortressesInput, UserUncheckedCreateWithoutFortressesInput>
  }

  export type UserUpsertWithoutFortressesInput = {
    update: XOR<UserUpdateWithoutFortressesInput, UserUncheckedUpdateWithoutFortressesInput>
    create: XOR<UserCreateWithoutFortressesInput, UserUncheckedCreateWithoutFortressesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutFortressesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutFortressesInput, UserUncheckedUpdateWithoutFortressesInput>
  }

  export type UserUpdateWithoutFortressesInput = {
    user_id?: StringFieldUpdateOperationsInput | string
    user_name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    random_parts_num?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    parts?: UserPartUpdateManyWithoutUserNestedInput
    markings?: UserMarkingUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutFortressesInput = {
    user_id?: StringFieldUpdateOperationsInput | string
    user_name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    random_parts_num?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    parts?: UserPartUncheckedUpdateManyWithoutUserNestedInput
    markings?: UserMarkingUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateWithoutMarkingsInput = {
    user_id?: string
    user_name: string
    password: string
    random_parts_num?: number
    created_at?: Date | string
    parts?: UserPartCreateNestedManyWithoutUserInput
    fortresses?: FortressCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutMarkingsInput = {
    user_id?: string
    user_name: string
    password: string
    random_parts_num?: number
    created_at?: Date | string
    parts?: UserPartUncheckedCreateNestedManyWithoutUserInput
    fortresses?: FortressUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutMarkingsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutMarkingsInput, UserUncheckedCreateWithoutMarkingsInput>
  }

  export type UserUpsertWithoutMarkingsInput = {
    update: XOR<UserUpdateWithoutMarkingsInput, UserUncheckedUpdateWithoutMarkingsInput>
    create: XOR<UserCreateWithoutMarkingsInput, UserUncheckedCreateWithoutMarkingsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutMarkingsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutMarkingsInput, UserUncheckedUpdateWithoutMarkingsInput>
  }

  export type UserUpdateWithoutMarkingsInput = {
    user_id?: StringFieldUpdateOperationsInput | string
    user_name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    random_parts_num?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    parts?: UserPartUpdateManyWithoutUserNestedInput
    fortresses?: FortressUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutMarkingsInput = {
    user_id?: StringFieldUpdateOperationsInput | string
    user_name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    random_parts_num?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    parts?: UserPartUncheckedUpdateManyWithoutUserNestedInput
    fortresses?: FortressUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserPartCreateManyUserInput = {
    id?: number
    partId: number
    domination: number
    createdAt?: Date | string
  }

  export type FortressCreateManyUserInput = {
    id?: number
    name: string
    createdAt?: Date | string
    parts: JsonNullValueInput | InputJsonValue
    score: number
  }

  export type UserMarkingCreateManyUserInput = {
    id?: number
    x: number
    y: number
    region: string
    markType?: string
    createdAt?: Date | string
  }

  export type UserPartUpdateWithoutUserInput = {
    domination?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    part?: PartUpdateOneRequiredWithoutUserPartsNestedInput
  }

  export type UserPartUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    partId?: IntFieldUpdateOperationsInput | number
    domination?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserPartUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    partId?: IntFieldUpdateOperationsInput | number
    domination?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FortressUpdateWithoutUserInput = {
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    parts?: JsonNullValueInput | InputJsonValue
    score?: IntFieldUpdateOperationsInput | number
  }

  export type FortressUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    parts?: JsonNullValueInput | InputJsonValue
    score?: IntFieldUpdateOperationsInput | number
  }

  export type FortressUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    parts?: JsonNullValueInput | InputJsonValue
    score?: IntFieldUpdateOperationsInput | number
  }

  export type UserMarkingUpdateWithoutUserInput = {
    x?: FloatFieldUpdateOperationsInput | number
    y?: FloatFieldUpdateOperationsInput | number
    region?: StringFieldUpdateOperationsInput | string
    markType?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserMarkingUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    x?: FloatFieldUpdateOperationsInput | number
    y?: FloatFieldUpdateOperationsInput | number
    region?: StringFieldUpdateOperationsInput | string
    markType?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserMarkingUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    x?: FloatFieldUpdateOperationsInput | number
    y?: FloatFieldUpdateOperationsInput | number
    region?: StringFieldUpdateOperationsInput | string
    markType?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserPartCreateManyPartInput = {
    id?: number
    userId: string
    domination: number
    createdAt?: Date | string
  }

  export type UserPartUpdateWithoutPartInput = {
    domination?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutPartsNestedInput
  }

  export type UserPartUncheckedUpdateWithoutPartInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: StringFieldUpdateOperationsInput | string
    domination?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserPartUncheckedUpdateManyWithoutPartInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: StringFieldUpdateOperationsInput | string
    domination?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PartCreateManyMaterialInput = {
    id?: number
    shape: string
  }

  export type PartUpdateWithoutMaterialInput = {
    shape?: StringFieldUpdateOperationsInput | string
    userParts?: UserPartUpdateManyWithoutPartNestedInput
  }

  export type PartUncheckedUpdateWithoutMaterialInput = {
    id?: IntFieldUpdateOperationsInput | number
    shape?: StringFieldUpdateOperationsInput | string
    userParts?: UserPartUncheckedUpdateManyWithoutPartNestedInput
  }

  export type PartUncheckedUpdateManyWithoutMaterialInput = {
    id?: IntFieldUpdateOperationsInput | number
    shape?: StringFieldUpdateOperationsInput | string
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use UserCountOutputTypeDefaultArgs instead
     */
    export type UserCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use PartCountOutputTypeDefaultArgs instead
     */
    export type PartCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = PartCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use MaterialCountOutputTypeDefaultArgs instead
     */
    export type MaterialCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = MaterialCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UserDefaultArgs instead
     */
    export type UserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserDefaultArgs<ExtArgs>
    /**
     * @deprecated Use PartDefaultArgs instead
     */
    export type PartArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = PartDefaultArgs<ExtArgs>
    /**
     * @deprecated Use MaterialDefaultArgs instead
     */
    export type MaterialArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = MaterialDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UserPartDefaultArgs instead
     */
    export type UserPartArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserPartDefaultArgs<ExtArgs>
    /**
     * @deprecated Use FortressDefaultArgs instead
     */
    export type FortressArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = FortressDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UserMarkingDefaultArgs instead
     */
    export type UserMarkingArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserMarkingDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}